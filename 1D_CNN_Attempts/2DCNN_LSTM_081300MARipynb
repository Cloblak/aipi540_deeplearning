{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "1D_CNN.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "background_execution": "on",
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Cloblak/aipi540_deeplearning/blob/main/1D_CNN_Attempts/2DCNN_LSTM_081300MARipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install alpaca_trade_api"
      ],
      "metadata": {
        "id": "Xj0pR3efRVrc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47500361-6dba-4147-dbf9-e415769d78dd"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting alpaca_trade_api\n",
            "  Downloading alpaca_trade_api-1.5.1-py3-none-any.whl (36 kB)\n",
            "Collecting aiohttp==3.7.4\n",
            "  Downloading aiohttp-3.7.4-cp37-cp37m-manylinux2014_x86_64.whl (1.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.3 MB 22.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: urllib3<2,>1.24 in /usr/local/lib/python3.7/dist-packages (from alpaca_trade_api) (1.24.3)\n",
            "Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from alpaca_trade_api) (1.21.5)\n",
            "Collecting websockets<11,>=8.0\n",
            "  Downloading websockets-10.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (111 kB)\n",
            "\u001b[K     |████████████████████████████████| 111 kB 61.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests<3,>2 in /usr/local/lib/python3.7/dist-packages (from alpaca_trade_api) (2.23.0)\n",
            "Collecting PyYAML==6.0\n",
            "  Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n",
            "\u001b[K     |████████████████████████████████| 596 kB 64.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pandas>=0.18.1 in /usr/local/lib/python3.7/dist-packages (from alpaca_trade_api) (1.3.5)\n",
            "Collecting msgpack==1.0.2\n",
            "  Downloading msgpack-1.0.2-cp37-cp37m-manylinux1_x86_64.whl (273 kB)\n",
            "\u001b[K     |████████████████████████████████| 273 kB 68.7 MB/s \n",
            "\u001b[?25hCollecting deprecation==2.1.0\n",
            "  Downloading deprecation-2.1.0-py2.py3-none-any.whl (11 kB)\n",
            "Collecting websocket-client<2,>=0.56.0\n",
            "  Downloading websocket_client-1.3.1-py3-none-any.whl (54 kB)\n",
            "\u001b[K     |████████████████████████████████| 54 kB 3.0 MB/s \n",
            "\u001b[?25hCollecting async-timeout<4.0,>=3.0\n",
            "  Downloading async_timeout-3.0.1-py3-none-any.whl (8.2 kB)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp==3.7.4->alpaca_trade_api) (21.4.0)\n",
            "Requirement already satisfied: chardet<4.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp==3.7.4->alpaca_trade_api) (3.0.4)\n",
            "Requirement already satisfied: typing-extensions>=3.6.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp==3.7.4->alpaca_trade_api) (3.10.0.2)\n",
            "Collecting yarl<2.0,>=1.0\n",
            "  Downloading yarl-1.7.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (271 kB)\n",
            "\u001b[K     |████████████████████████████████| 271 kB 86.9 MB/s \n",
            "\u001b[?25hCollecting multidict<7.0,>=4.5\n",
            "  Downloading multidict-6.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (94 kB)\n",
            "\u001b[K     |████████████████████████████████| 94 kB 2.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from deprecation==2.1.0->alpaca_trade_api) (21.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.18.1->alpaca_trade_api) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.18.1->alpaca_trade_api) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.18.1->alpaca_trade_api) (1.15.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>2->alpaca_trade_api) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>2->alpaca_trade_api) (2021.10.8)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->deprecation==2.1.0->alpaca_trade_api) (3.0.7)\n",
            "Installing collected packages: multidict, yarl, async-timeout, websockets, websocket-client, PyYAML, msgpack, deprecation, aiohttp, alpaca-trade-api\n",
            "  Attempting uninstall: PyYAML\n",
            "    Found existing installation: PyYAML 3.13\n",
            "    Uninstalling PyYAML-3.13:\n",
            "      Successfully uninstalled PyYAML-3.13\n",
            "  Attempting uninstall: msgpack\n",
            "    Found existing installation: msgpack 1.0.3\n",
            "    Uninstalling msgpack-1.0.3:\n",
            "      Successfully uninstalled msgpack-1.0.3\n",
            "Successfully installed PyYAML-6.0 aiohttp-3.7.4 alpaca-trade-api-1.5.1 async-timeout-3.0.1 deprecation-2.1.0 msgpack-1.0.2 multidict-6.0.2 websocket-client-1.3.1 websockets-10.2 yarl-1.7.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Features To Consider\n",
        " - Targets are only predicting sell within market hours, i.e. at 1530, target is prediciting price for 1100 the next day.  Data from pre and post market is taken into consideration, and a sell or buy will be indicated if the price will flucuate after close."
      ],
      "metadata": {
        "id": "hdKRKIogGAu6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import Dependencies\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from torch.autograd import Variable\n",
        "from torch.nn import Linear, ReLU, CrossEntropyLoss, Sequential, Conv2d, MaxPool2d, Module, Softmax, BatchNorm2d, Dropout\n",
        "from torch.optim import Adam, SGD\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from torch.utils.tensorboard import SummaryWriter\n",
        "from torchsummary import summary\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from tqdm.notebook import tqdm\n",
        "import alpaca_trade_api as tradeapi\n",
        "from datetime import datetime, timedelta, tzinfo, timezone, time\n",
        "import os.path\n",
        "import ast\n",
        "import threading\n",
        "import math\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
        "import warnings"
      ],
      "metadata": {
        "id": "J1fWNRnTQZX-"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_seed = 182\n",
        "torch.manual_seed(random_seed)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DrI_WR501Iis",
        "outputId": "e5231732-8e45-4aea-dfaf-f0926c0563f2"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<torch._C.Generator at 0x7eff6d6ec290>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PAPER_API_KEY = \"PKE39LILN9SL1FMJMFV7\"\n",
        "PAPER_SECRET_KEY = \"TkU7fXH6WhP15MewgWlSnQG5RUoHGOPQ7yqlD6xq\"\n",
        "PAPER_BASE_URL = 'https://paper-api.alpaca.markets'"
      ],
      "metadata": {
        "id": "IXnO8ykgRIuv"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "api = tradeapi.REST(PAPER_API_KEY, PAPER_SECRET_KEY, PAPER_BASE_URL, api_version='v2')"
      ],
      "metadata": {
        "id": "_3XShkLcRQMs"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def prepost_train_test_validate_offset_data(api, ticker, interval, train_days=180, test_days=60, validate_days=30, offset_days = 0):\n",
        "    ticker_data_dict = None\n",
        "    ticker_data_dict = {}\n",
        "    monthly_data_dict = None\n",
        "    monthly_data_dict = {}\n",
        "    interval_loop_data = None\n",
        "    interval_loop_data = pd.DataFrame()\n",
        "    stock_data = None\n",
        "    \n",
        "    days_to_collect = train_days + test_days + validate_days + offset_days\n",
        "\n",
        "    TZ = 'US/Eastern'\n",
        "\n",
        "    start = pd.to_datetime((datetime.now() - timedelta(days=days_to_collect)).strftime(\"%Y-%m-%d %H:%M\"), utc=True)\n",
        "    end = pd.to_datetime(datetime.now().strftime(\"%Y-%m-%d %H:%M\"), utc=True)\n",
        "\n",
        "    stock_data = api.get_bars(ticker, interval, start = start.isoformat(), end=end.isoformat(), adjustment=\"raw\").df\n",
        "    \n",
        "    interval_loop_data = interval_loop_data.append(stock_data)\n",
        "    df_start_ref = interval_loop_data.index[0]\n",
        "    start_str_ref = pd.to_datetime(start, utc=True)\n",
        "\n",
        "    while start_str_ref.value < ( pd.to_datetime(df_start_ref, utc=True) - pd.Timedelta(days=2.5)).value:\n",
        "        end_new = pd.to_datetime(interval_loop_data.index[0].strftime(\"%Y-%m-%d %H:%M\"), utc=True).isoformat()\n",
        "        stock_data_new = None\n",
        "        stock_data_new = api.get_bars(ticker, interval, start=start, end=end_new, adjustment=\"raw\").df\n",
        "        #stock_data_new = stock_data_new.reset_index()\n",
        "        interval_loop_data = interval_loop_data.append(stock_data_new).sort_values(by=['index'], ascending=True)\n",
        "        df_start_ref = interval_loop_data.index[0]\n",
        "        \n",
        "    stock_yr_min_df = interval_loop_data.copy()\n",
        "    stock_yr_min_df[\"Open\"] = stock_yr_min_df['open']\n",
        "    stock_yr_min_df[\"High\"]= stock_yr_min_df[\"high\"]\n",
        "    stock_yr_min_df[\"Low\"] = stock_yr_min_df[\"low\"]\n",
        "    stock_yr_min_df[\"Close\"] = stock_yr_min_df[\"close\"]\n",
        "    stock_yr_min_df[\"Volume\"] = stock_yr_min_df[\"volume\"]\n",
        "    stock_yr_min_df[\"VolumeWeightedAvgPrice\"] = stock_yr_min_df[\"vwap\"]\n",
        "    stock_yr_min_df[\"Time\"] = stock_yr_min_df.index.tz_convert(TZ)\n",
        "    stock_yr_min_df.index = stock_yr_min_df.index.tz_convert(TZ)\n",
        "    final_df = stock_yr_min_df.filter([\"Time\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\", \"VolumeWeightedAvgPrice\"], axis = 1)\n",
        "    \n",
        "    first_day = final_df.index[0]\n",
        "    traintest_day = final_df.index[-1] - pd.Timedelta(days= test_days+validate_days+offset_days)\n",
        "    valtest_day = final_df.index[-1] - pd.Timedelta(days= test_days+offset_days)\n",
        "    last_day = final_df.index[-1] - pd.Timedelta(days= offset_days)\n",
        "    training_df =  final_df.loc[first_day:traintest_day] #(data_split - pd.Timedelta(days=1))]\n",
        "    validate_df = final_df.loc[traintest_day:valtest_day]\n",
        "    testing_df =  final_df.loc[valtest_day:last_day]\n",
        "    full_train = final_df.loc[first_day:last_day]\n",
        "    offset_df =  final_df.loc[last_day:]\n",
        "\n",
        "    return training_df, validate_df, testing_df, full_train, offset_df, final_df, traintest_day, valtest_day\n",
        "\n",
        "from datetime import date\n",
        "\n",
        "train_start = date(2017, 2, 18)\n",
        "train_end = date(2020, 3, 29)\n",
        "train_delta = train_end - train_start\n",
        "print(f'Number of days of Training Data {train_delta.days}')\n",
        "\n",
        "val_day_num = 400\n",
        "print(f'Number of days of Validation Data {val_day_num}')\n",
        "\n",
        "test_start = train_end + timedelta(val_day_num)\n",
        "test_end = date.today()\n",
        "test_delta = (test_end - test_start)\n",
        "print(f'Number of days of Holdout Test Data {test_delta.days}')\n",
        "\n",
        "ticker = \"CORN\" # Ticker Symbol to Test\n",
        "interval = \"5Min\" # Interval of bars\n",
        "train_day_int = train_delta.days # Size of training set (Jan 2010 - Oct 2017)\n",
        "val_day_int = val_day_num # Size of validation set\n",
        "test_day_int = test_delta.days # Size of test set\n",
        "offset_day_int = 60 # Number of days to off set the training data\n",
        "train_raw, val_raw, test_raw, full_raw, offset_raw, complete_raw, traintest_day, testval_day = prepost_train_test_validate_offset_data(api, ticker, \n",
        "                                                                                     interval, \n",
        "                                                                                     train_days=train_day_int, \n",
        "                                                                                     test_days=test_day_int, \n",
        "                                                                                     validate_days=val_day_int,\n",
        "                                                                                     offset_days = offset_day_int)\n",
        "\n",
        "def timeFilterAndBackfill(df):\n",
        "  \"\"\" \n",
        "  Prep df to be filled out for each trading day:\n",
        "    Time Frame: 0930-1930\n",
        "    Backfilling NaNs\n",
        "    Adjusting Volume to Zero if no Trading data is present\n",
        "      - Assumption is that there were no trades duing that time \n",
        "\n",
        "  We will build over lapping arrays by 30 min to give ourselfs more\n",
        "  oppurtunities to predict during a given trading day \n",
        "  \"\"\"\n",
        "  \n",
        "  df = df.between_time('07:29','17:29') # intial sorting of data\n",
        "\n",
        "  TZ = 'US/Eastern' # define the correct timezone\n",
        "\n",
        "  start_dateTime = pd.Timestamp(year = df.index[0].year, \n",
        "                                month = df.index[0].month, \n",
        "                                day = df.index[0].day, \n",
        "                                hour = 7, minute = 25, tz = TZ)\n",
        "\n",
        "  end_dateTime = pd.Timestamp(year = df.index[-1].year, \n",
        "                              month = df.index[-1].month, \n",
        "                              day = df.index[-1].day, \n",
        "                              hour = 17, minute = 35, tz = TZ)\n",
        "\n",
        "  # build blank index that has ever 5 min interval represented\n",
        "  dateTime_index = pd.date_range(start_dateTime,\n",
        "                                end_dateTime, \n",
        "                                freq='5min').tolist()\n",
        "\n",
        "  dateTime_index_df = pd.DataFrame()\n",
        "  dateTime_index_df[\"Time\"] = dateTime_index \n",
        "  filtered_df = pd.merge_asof(dateTime_index_df, df,  \n",
        "                              on='Time').set_index(\"Time\").between_time('09:29','17:29')\n",
        "\n",
        "  # create the close array by back filling NA, to represent no change in close\n",
        "  closeset_list = []\n",
        "  prev_c = None\n",
        "\n",
        "  for c in filtered_df[\"Close\"]:\n",
        "\n",
        "    if prev_c == None:\n",
        "      if math.isnan(c):\n",
        "        prev_c = 0\n",
        "        closeset_list.append(0)\n",
        "      else:\n",
        "        prev_c = c\n",
        "        closeset_list.append(c)\n",
        "    \n",
        "    elif prev_c != None:\n",
        "      if c == prev_c:\n",
        "        closeset_list.append(c)\n",
        "      elif math.isnan(c):\n",
        "        closeset_list.append(prev_c)\n",
        "      else:\n",
        "        closeset_list.append(c)\n",
        "        prev_c = c\n",
        "    \n",
        "  filtered_df[\"Close\"] = closeset_list\n",
        "\n",
        "  # create the volume\n",
        "  volumeset_list = []\n",
        "  prev_v = None\n",
        "\n",
        "  for v in filtered_df[\"Volume\"]:\n",
        "    \n",
        "    if prev_v == None:\n",
        "      if math.isnan(v):\n",
        "        prev_v = 0\n",
        "        volumeset_list.append(0)\n",
        "      else:\n",
        "        prev_v = v\n",
        "        volumeset_list.append(v)\n",
        "\n",
        "    elif prev_v != None:\n",
        "      if v == prev_v:\n",
        "        volumeset_list.append(0)\n",
        "        prev_v = v\n",
        "      elif math.isnan(v):\n",
        "        volumeset_list.append(0)\n",
        "        prev_v = 0\n",
        "      else:\n",
        "        volumeset_list.append(v)\n",
        "        prev_v = v\n",
        "\n",
        "  filtered_df[\"Volume\"] = volumeset_list\n",
        "  \n",
        "  adjvolumeset_list = []\n",
        "  prev_v = None\n",
        "\n",
        "  for v in filtered_df[\"VolumeWeightedAvgPrice\"]:\n",
        "    if prev_v == None:\n",
        "      if math.isnan(v):\n",
        "        prev_v = 0\n",
        "        adjvolumeset_list.append(0)\n",
        "      else:\n",
        "        prev_v = v\n",
        "        adjvolumeset_list.append(v)\n",
        "    elif prev_v != None:\n",
        "      if v == prev_v:\n",
        "        adjvolumeset_list.append(0)\n",
        "        prev_v = v\n",
        "      elif math.isnan(v):\n",
        "        adjvolumeset_list.append(0)\n",
        "        prev_v = 0\n",
        "      else:\n",
        "        adjvolumeset_list.append(v)\n",
        "        prev_v = v\n",
        "\n",
        "  filtered_df[\"VolumeWeightedAvgPrice\"] = adjvolumeset_list\n",
        "\n",
        "  preped_df = filtered_df.backfill()\n",
        "\n",
        "  return preped_df  "
      ],
      "metadata": {
        "id": "tINNlljbRaDs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "195a2188-edfe-4ec2-fef7-e5e1baae36c3"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of days of Training Data 1135\n",
            "Number of days of Validation Data 400\n",
            "Number of days of Holdout Test Data 309\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_raw[0:300]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "J6Cw_PVrh2lJ",
        "outputId": "2a3e69cc-5afb-4a08-8007-4fc777bb6cc2"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3824b797-0605-4578-8067-1e89bff7122e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>VolumeWeightedAvgPrice</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2016-12-20 09:25:00-05:00</th>\n",
              "      <td>2016-12-20 09:25:00-05:00</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>390</td>\n",
              "      <td>18.840000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 09:30:00-05:00</th>\n",
              "      <td>2016-12-20 09:30:00-05:00</td>\n",
              "      <td>18.8500</td>\n",
              "      <td>18.9000</td>\n",
              "      <td>18.8500</td>\n",
              "      <td>18.8900</td>\n",
              "      <td>10913</td>\n",
              "      <td>18.859530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 09:35:00-05:00</th>\n",
              "      <td>2016-12-20 09:35:00-05:00</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>18.8583</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>8414</td>\n",
              "      <td>18.836839</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 09:40:00-05:00</th>\n",
              "      <td>2016-12-20 09:40:00-05:00</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>18.8450</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>34050</td>\n",
              "      <td>18.834351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 09:45:00-05:00</th>\n",
              "      <td>2016-12-20 09:45:00-05:00</td>\n",
              "      <td>18.8483</td>\n",
              "      <td>18.8500</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8500</td>\n",
              "      <td>950</td>\n",
              "      <td>18.844863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-29 13:20:00-05:00</th>\n",
              "      <td>2016-12-29 13:20:00-05:00</td>\n",
              "      <td>18.6900</td>\n",
              "      <td>18.6900</td>\n",
              "      <td>18.6900</td>\n",
              "      <td>18.6900</td>\n",
              "      <td>100</td>\n",
              "      <td>18.690000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-29 13:25:00-05:00</th>\n",
              "      <td>2016-12-29 13:25:00-05:00</td>\n",
              "      <td>18.6999</td>\n",
              "      <td>18.6999</td>\n",
              "      <td>18.6999</td>\n",
              "      <td>18.6999</td>\n",
              "      <td>150</td>\n",
              "      <td>18.699900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-29 13:35:00-05:00</th>\n",
              "      <td>2016-12-29 13:35:00-05:00</td>\n",
              "      <td>18.6814</td>\n",
              "      <td>18.6814</td>\n",
              "      <td>18.6814</td>\n",
              "      <td>18.6814</td>\n",
              "      <td>460</td>\n",
              "      <td>18.681400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-29 13:40:00-05:00</th>\n",
              "      <td>2016-12-29 13:40:00-05:00</td>\n",
              "      <td>18.7000</td>\n",
              "      <td>18.7000</td>\n",
              "      <td>18.7000</td>\n",
              "      <td>18.7000</td>\n",
              "      <td>100</td>\n",
              "      <td>18.700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-29 14:25:00-05:00</th>\n",
              "      <td>2016-12-29 14:25:00-05:00</td>\n",
              "      <td>18.7020</td>\n",
              "      <td>18.7020</td>\n",
              "      <td>18.7020</td>\n",
              "      <td>18.7020</td>\n",
              "      <td>100</td>\n",
              "      <td>18.702000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>300 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3824b797-0605-4578-8067-1e89bff7122e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3824b797-0605-4578-8067-1e89bff7122e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3824b797-0605-4578-8067-1e89bff7122e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                               Time     Open     High  \\\n",
              "timestamp                                                               \n",
              "2016-12-20 09:25:00-05:00 2016-12-20 09:25:00-05:00  18.8400  18.8400   \n",
              "2016-12-20 09:30:00-05:00 2016-12-20 09:30:00-05:00  18.8500  18.9000   \n",
              "2016-12-20 09:35:00-05:00 2016-12-20 09:35:00-05:00  18.8300  18.8583   \n",
              "2016-12-20 09:40:00-05:00 2016-12-20 09:40:00-05:00  18.8300  18.8450   \n",
              "2016-12-20 09:45:00-05:00 2016-12-20 09:45:00-05:00  18.8483  18.8500   \n",
              "...                                             ...      ...      ...   \n",
              "2016-12-29 13:20:00-05:00 2016-12-29 13:20:00-05:00  18.6900  18.6900   \n",
              "2016-12-29 13:25:00-05:00 2016-12-29 13:25:00-05:00  18.6999  18.6999   \n",
              "2016-12-29 13:35:00-05:00 2016-12-29 13:35:00-05:00  18.6814  18.6814   \n",
              "2016-12-29 13:40:00-05:00 2016-12-29 13:40:00-05:00  18.7000  18.7000   \n",
              "2016-12-29 14:25:00-05:00 2016-12-29 14:25:00-05:00  18.7020  18.7020   \n",
              "\n",
              "                               Low    Close  Volume  VolumeWeightedAvgPrice  \n",
              "timestamp                                                                    \n",
              "2016-12-20 09:25:00-05:00  18.8400  18.8400     390               18.840000  \n",
              "2016-12-20 09:30:00-05:00  18.8500  18.8900   10913               18.859530  \n",
              "2016-12-20 09:35:00-05:00  18.8300  18.8300    8414               18.836839  \n",
              "2016-12-20 09:40:00-05:00  18.8300  18.8400   34050               18.834351  \n",
              "2016-12-20 09:45:00-05:00  18.8400  18.8500     950               18.844863  \n",
              "...                            ...      ...     ...                     ...  \n",
              "2016-12-29 13:20:00-05:00  18.6900  18.6900     100               18.690000  \n",
              "2016-12-29 13:25:00-05:00  18.6999  18.6999     150               18.699900  \n",
              "2016-12-29 13:35:00-05:00  18.6814  18.6814     460               18.681400  \n",
              "2016-12-29 13:40:00-05:00  18.7000  18.7000     100               18.700000  \n",
              "2016-12-29 14:25:00-05:00  18.7020  18.7020     100               18.702000  \n",
              "\n",
              "[300 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def buildTargets_VolOnly(full_df = full_raw, train_observations = train_raw.shape[0], \n",
        "                         val_observations = val_raw.shape[0], \n",
        "                         test_observations = test_raw.shape[0], \n",
        "                         alph = .55, volity_int = 10):\n",
        "\n",
        "  \"\"\" \n",
        "  This function will take a complete set of train, val, and test data and return the targets.\n",
        "  Volitility will be calculated over the 252 5min incriments \n",
        "  The Target shift is looking at 2 hours shift from current time\n",
        "  \"\"\"\n",
        "\n",
        "  returns = np.log(full_df['Close']/(full_df['Close'].shift()))\n",
        "  returns.fillna(0, inplace=True)\n",
        "  volatility = returns.rolling(window=(volity_int)).std()*np.sqrt(volity_int)\n",
        "\n",
        "\n",
        "\n",
        "  return volatility\n",
        "  #return train_targets, val_targets, test_targets, full_targets\n",
        "\n",
        "volatility = buildTargets_VolOnly()\n",
        "\n",
        "fig = plt.figure(figsize=(15, 7))\n",
        "ax1 = fig.add_subplot(1, 1, 1)\n",
        "volatility.plot(ax=ax1, color = \"red\")\n",
        "ax1.set_xlabel('Date')\n",
        "ax1.set_ylabel('Volatility', color = \"red\")\n",
        "ax1.set_title(f'Annualized volatility for {ticker}')\n",
        "ax2 = ax1.twinx()\n",
        "full_raw.Close.plot(ax=ax2, color = \"blue\")\n",
        "ax2.set_ylabel('Close', color = \"blue\")\n",
        "ax2.axvline(x=full_raw.index[train_raw.shape[0]])\n",
        "ax2.axvline(x=full_raw.index[val_raw.shape[0]+train_raw.shape[0]])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "fWqLBPQPbjYZ",
        "outputId": "2fa588ff-83f3-445e-ae2a-0e9fcdc7a780",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x504 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train = timeFilterAndBackfill(train_raw)\n",
        "val = timeFilterAndBackfill(val_raw)\n",
        "test = timeFilterAndBackfill(test_raw)\n",
        "\n",
        "train = train[train.index.dayofweek <= 4].copy()\n",
        "val = val[val.index.dayofweek <= 4].copy()\n",
        "test = test[test.index.dayofweek <= 4].copy()\n",
        "\n",
        "train[\"Open\"] = np.where((train[\"Volume\"] == 0), train[\"Close\"], train[\"Open\"])\n",
        "train[\"High\"] = np.where((train[\"Volume\"] == 0), train[\"Close\"], train[\"High\"])\n",
        "train[\"Low\"] = np.where((train[\"Volume\"] == 0), train[\"Close\"], train[\"Low\"])\n",
        "\n",
        "val[\"Open\"] = np.where((val[\"Volume\"] == 0), val[\"Close\"], val[\"Open\"])\n",
        "val[\"High\"] = np.where((val[\"Volume\"] == 0), val[\"Close\"], val[\"High\"])\n",
        "val[\"Low\"] = np.where((val[\"Volume\"] == 0), val[\"Close\"], val[\"Low\"])\n",
        "\n",
        "test[\"Open\"] = np.where((test[\"Volume\"] == 0), test[\"Close\"], test[\"Open\"])\n",
        "test[\"High\"] = np.where((test[\"Volume\"] == 0), test[\"Close\"], test[\"High\"])\n",
        "test[\"Low\"] = np.where((test[\"Volume\"] == 0), test[\"Close\"], test[\"Low\"])\n",
        "\n",
        "def strided_axis0(a, L, overlap=1):\n",
        "    if L==overlap:\n",
        "        raise Exception(\"Overlap arg must be smaller than length of windows\")\n",
        "    S = L - overlap\n",
        "    nd0 = ((len(a)-L)//S)+1\n",
        "    if nd0*S-S!=len(a)-L:\n",
        "        warnings.warn(\"Not all elements were covered\")\n",
        "    m,n = a.shape\n",
        "    s0,s1 = a.strides\n",
        "    return np.lib.stride_tricks.as_strided(a, shape=(nd0,L,n), strides=(S*s0,s0,s1))\n",
        "\n",
        "# OLDER CODE WITHOUT OVERLAP OF LABELING\n",
        "# def blockshaped(arr, nrows, ncols):\n",
        "#     \"\"\"\n",
        "#     Return an array of shape (n, nrows, ncols) where\n",
        "#     n * nrows * ncols = arr.size\n",
        "\n",
        "#     If arr is a 2D array, the returned array should look like n subblocks with\n",
        "#     each subblock preserving the \"physical\" layout of arr.\n",
        "#     \"\"\"\n",
        "#     h, w = arr.shape\n",
        "#     assert h % nrows == 0, f\"{h} rows is not evenly divisible by {nrows}\"\n",
        "#     assert w % ncols == 0, f\"{w} cols is not evenly divisible by {ncols}\"\n",
        "#     return np.flip(np.rot90((arr.reshape(h//nrows, nrows, -1, ncols)\n",
        "#                .swapaxes(1,2)\n",
        "#                .reshape(-1, nrows, ncols)), axes = (1, 2)), axis = 1)\n",
        "\n",
        "\n",
        "def blockshaped(arr, nrows, ncols, overlapping_5min_intervals = 0):\n",
        "    \"\"\"\n",
        "    Return an array of shape (n, nrows, ncols) where\n",
        "    n * nrows * ncols = arr.size\n",
        "\n",
        "    If arr is a 2D array, the returned array should look like n subblocks with\n",
        "    each subblock preserving the \"physical\" layout of arr.\n",
        "    \"\"\"\n",
        "\n",
        "    h, w = arr.shape\n",
        "    assert h % nrows == 0, f\"{h} rows is not evenly divisible by {nrows}\"\n",
        "    assert w % ncols == 0, f\"{w} cols is not evenly divisible by {ncols}\"\n",
        "\n",
        "    return np.flip(np.rot90((strided_axis0(arr, 24, overlap=overlapping_5min_intervals).reshape(-1, nrows, ncols)), axes = (1, 2)), axis = 1)\n",
        "\n",
        "train_tonp = train[[\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]]\n",
        "val_tonp = val[[\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]]\n",
        "test_tonp = test[[\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]]\n",
        "train_array = train_tonp.to_numpy()\n",
        "val_array = val_tonp.to_numpy()\n",
        "test_array = test_tonp.to_numpy()\n",
        "\n",
        "X_train_pre_final = blockshaped(train_array, 24, 5, overlapping_5min_intervals = 0)\n",
        "X_val_pre_final = blockshaped(val_array, 24, 5, overlapping_5min_intervals = 0)\n",
        "X_test_pre_final = blockshaped(test_array, 24, 5, overlapping_5min_intervals = 0)\n",
        "\n",
        "# X_train_pre_final = blockshaped(train_array, 24, 5)\n",
        "# X_val_pre_final = blockshaped(val_array, 24, 5)\n",
        "# X_test_pre_final = blockshaped(test_array, 24, 5)"
      ],
      "metadata": {
        "id": "0_yU14VEM37m"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.set_printoptions(edgeitems=10,linewidth=580)\n",
        "X_train_pre_final[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V8KcE_XCidzo",
        "outputId": "42cbe22f-7e9e-4dd8-d9ca-e11705fca910"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  18.8   ,   18.79  ,   18.78  ,   18.7999,   18.78  ,   18.782 ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.7903,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.7999,   18.78  ,   18.782 ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.7903,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.77  ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.7902,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.79  ,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.77  ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.7902,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.79  ,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [2400.    ,  600.    ,  100.    , 2100.    ,    0.    , 1700.    ,    0.    ,  100.    ,    0.    ,    0.    ,  200.    ,  100.    ,  500.    ,    0.    ,    0.    ,    0.    ,    0.    ,  100.    ,    0.    ,  700.    ,    0.    ,    0.    ,  100.    ,    0.    ]])"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_tonp[24:48]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "29LbU_ukUK8j",
        "outputId": "0cd5fe25-15c5-4a11-cfcf-f10bf304ba71"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-e586e0db-f776-4caf-bcd1-2833309ae851\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:30:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>2400.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:35:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:40:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:45:00-05:00</th>\n",
              "      <td>18.7999</td>\n",
              "      <td>18.7999</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>2100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:50:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:55:00-05:00</th>\n",
              "      <td>18.7820</td>\n",
              "      <td>18.7820</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>1700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:00:00-05:00</th>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:05:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:10:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:15:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:20:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.7902</td>\n",
              "      <td>18.7902</td>\n",
              "      <td>200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:25:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:30:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:35:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:40:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:45:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:50:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:55:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:00:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:05:00-05:00</th>\n",
              "      <td>18.7903</td>\n",
              "      <td>18.7903</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:10:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:15:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:20:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:25:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e586e0db-f776-4caf-bcd1-2833309ae851')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e586e0db-f776-4caf-bcd1-2833309ae851 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e586e0db-f776-4caf-bcd1-2833309ae851');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                              Open     High      Low    Close  Volume\n",
              "Time                                                                 \n",
              "2016-12-20 11:30:00-05:00  18.8000  18.8000  18.8000  18.8000  2400.0\n",
              "2016-12-20 11:35:00-05:00  18.7900  18.7900  18.7900  18.7900   600.0\n",
              "2016-12-20 11:40:00-05:00  18.7800  18.7800  18.7800  18.7800   100.0\n",
              "2016-12-20 11:45:00-05:00  18.7999  18.7999  18.7800  18.7800  2100.0\n",
              "2016-12-20 11:50:00-05:00  18.7800  18.7800  18.7800  18.7800     0.0\n",
              "2016-12-20 11:55:00-05:00  18.7820  18.7820  18.7700  18.7700  1700.0\n",
              "2016-12-20 12:00:00-05:00  18.7700  18.7700  18.7700  18.7700     0.0\n",
              "2016-12-20 12:05:00-05:00  18.8000  18.8000  18.8000  18.8000   100.0\n",
              "2016-12-20 12:10:00-05:00  18.8000  18.8000  18.8000  18.8000     0.0\n",
              "2016-12-20 12:15:00-05:00  18.8000  18.8000  18.8000  18.8000     0.0\n",
              "2016-12-20 12:20:00-05:00  18.8000  18.8000  18.7902  18.7902   200.0\n",
              "2016-12-20 12:25:00-05:00  18.7900  18.7900  18.7900  18.7900   100.0\n",
              "2016-12-20 12:30:00-05:00  18.7800  18.7800  18.7800  18.7800   500.0\n",
              "2016-12-20 12:35:00-05:00  18.7800  18.7800  18.7800  18.7800     0.0\n",
              "2016-12-20 12:40:00-05:00  18.7800  18.7800  18.7800  18.7800     0.0\n",
              "2016-12-20 12:45:00-05:00  18.7800  18.7800  18.7800  18.7800     0.0\n",
              "2016-12-20 12:50:00-05:00  18.7800  18.7800  18.7800  18.7800     0.0\n",
              "2016-12-20 12:55:00-05:00  18.8000  18.8000  18.8000  18.8000   100.0\n",
              "2016-12-20 13:00:00-05:00  18.8000  18.8000  18.8000  18.8000     0.0\n",
              "2016-12-20 13:05:00-05:00  18.7903  18.7903  18.7900  18.7900   700.0\n",
              "2016-12-20 13:10:00-05:00  18.7900  18.7900  18.7900  18.7900     0.0\n",
              "2016-12-20 13:15:00-05:00  18.7900  18.7900  18.7900  18.7900     0.0\n",
              "2016-12-20 13:20:00-05:00  18.8000  18.8000  18.8000  18.8000   100.0\n",
              "2016-12-20 13:25:00-05:00  18.8000  18.8000  18.8000  18.8000     0.0"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_pre_final[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y6w8fb_TU-Tx",
        "outputId": "865ecafd-e527-4321-dba0-cda6f2d39291"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  18.8   ,   18.79  ,   18.78  ,   18.7999,   18.78  ,   18.782 ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.7903,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.7999,   18.78  ,   18.782 ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.7903,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.77  ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.7902,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.79  ,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [  18.8   ,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.77  ,   18.77  ,   18.8   ,   18.8   ,   18.8   ,   18.7902,   18.79  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.78  ,   18.8   ,   18.8   ,   18.79  ,   18.79  ,   18.79  ,   18.8   ,   18.8   ],\n",
              "       [2400.    ,  600.    ,  100.    , 2100.    ,    0.    , 1700.    ,    0.    ,  100.    ,    0.    ,    0.    ,  200.    ,  100.    ,  500.    ,    0.    ,    0.    ,    0.    ,    0.    ,  100.    ,    0.    ,  700.    ,    0.    ,    0.    ,  100.    ,    0.    ]])"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create target from OHLC and Volume Data\n",
        "###### THIS IS FOR 3 CLASS FROM PAPER ########\n",
        "# def buildTargets(obs_array,  \n",
        "#                  alph = .55, \n",
        "#                  volity_int = 10):\n",
        "\n",
        "#   \"\"\" \n",
        "#   This function will take a complete set of train, val, and test \n",
        "#   data and return the targets. Volitility will be calculated over \n",
        "#   the 24 5min incriments. The Target shift is looking at 2 hours \n",
        "#   shift from current time\n",
        "\n",
        "#   shift_2hour = The amount of time the data interval take to equal 2 hours \n",
        "#                 (i.e. 5 min data interval is equal to 24)\n",
        "#   alph = The alpha value for calculating the shift in price\n",
        "#   volity_int = the number of incriments used to calculate volitility \n",
        "#   \"\"\"\n",
        "\n",
        "#   target_close_list =[]\n",
        "\n",
        "#   for arr in obs_array:\n",
        "#     target_close_list.append(arr[3][-1])\n",
        "  \n",
        "#   target_close_df = pd.DataFrame()\n",
        "#   target_close_df[\"Close\"] = target_close_list\n",
        "\n",
        "#   target_close_df[\"Volitility\"] = target_close_df[\"Close\"].rolling(volity_int).std()\n",
        "\n",
        "#   # print(len(volatility), len(target_close_df[\"Close\"]))\n",
        "\n",
        "  \n",
        "#   targets = [0] * len(target_close_df.Close)\n",
        "\n",
        "#   targets = np.where(target_close_df.Close.shift(-1) >= (target_close_df.Close * (1 + alph * target_close_df[\"Volitility\"])), \n",
        "#            2, targets)\n",
        "  \n",
        "#   targets = np.where(target_close_df.Close.shift(-1) <= (target_close_df.Close * (1 - alph * target_close_df[\"Volitility\"])), \n",
        "#            1, targets)\n",
        "\n",
        "#   return targets\n",
        "\n",
        "\n",
        "#####DISREGUARD THE VOLITLITY######\n",
        "def buildTargets(obs_array,  \n",
        "                 alph = .55, \n",
        "                 volity_int = 10):\n",
        "\n",
        "  \"\"\" \n",
        "  This function will take a complete set of train, val, and test \n",
        "  data and return the targets. Volitility will be calculated over \n",
        "  the 24 5min incriments. The Target shift is looking at 2 hours \n",
        "  shift from current time\n",
        "\n",
        "  shift_2hour = The amount of time the data interval take to equal 2 hours \n",
        "                (i.e. 5 min data interval is equal to 24)\n",
        "  alph = The alpha value for calculating the shift in price\n",
        "  volity_int = the number of incriments used to calculate volitility \n",
        "  \"\"\"\n",
        "\n",
        "  target_close_list =[]\n",
        "\n",
        "  for arr in obs_array:\n",
        "    target_close_list.append(arr[3][-1])\n",
        "  \n",
        "  target_close_df = pd.DataFrame()\n",
        "  target_close_df[\"Close\"] = target_close_list\n",
        "\n",
        "  target_close_df[\"Volitility\"] = target_close_df[\"Close\"].rolling(volity_int).std()\n",
        "  \n",
        "  targets = [0] * len(target_close_df.Close)\n",
        "\n",
        "  targets = np.where(target_close_df.Close.shift(-1) >= (target_close_df.Close * (1 + alph)), \n",
        "           2, targets)\n",
        "  \n",
        "  targets = np.where(target_close_df.Close.shift(-1) <= (target_close_df.Close * (1 - alph)), \n",
        "           1, targets)\n",
        "\n",
        "  return targets\n",
        "\n",
        "  #####Binary Class######\n",
        "# def buildTargets(obs_array,  \n",
        "#                  alph = .55, \n",
        "#                  volity_int = 10):\n",
        "\n",
        "#   \"\"\" \n",
        "#   This function will take a complete set of train, val, and test \n",
        "#   data and return the targets. Volitility will be calculated over \n",
        "#   the 24 5min incriments. The Target shift is looking at 2 hours \n",
        "#   shift from current time\n",
        "\n",
        "#   shift_2hour = The amount of time the data interval take to equal 2 hours \n",
        "#                 (i.e. 5 min data interval is equal to 24)\n",
        "#   alph = The alpha value for calculating the shift in price\n",
        "#   volity_int = the number of incriments used to calculate volitility \n",
        "#   \"\"\"\n",
        "\n",
        "#   target_close_list =[]\n",
        "\n",
        "#   for arr in obs_array:\n",
        "#     target_close_list.append(arr[3][-1])\n",
        "  \n",
        "#   target_close_df = pd.DataFrame()\n",
        "#   target_close_df[\"Close\"] = target_close_list\n",
        "\n",
        "#   target_close_df[\"Volitility\"] = target_close_df[\"Close\"].rolling(volity_int).std()\n",
        "\n",
        "#   # print(len(volatility), len(target_close_df[\"Close\"]))\n",
        "\n",
        "  \n",
        "#   targets = [0] * len(target_close_df.Close)\n",
        "\n",
        "#   targets = np.where(target_close_df.Close.shift(-1) >= (target_close_df.Close * (1 + alph)), \n",
        "#            1, targets)\n",
        "\n",
        "#   return targets"
      ],
      "metadata": {
        "id": "Pe89LdnsLltO"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "volity_val = 10\n",
        "alph = .0015\n",
        "y_train_pre_final = buildTargets(X_train_pre_final, alph=alph,  volity_int = volity_val)\n",
        "y_val_pre_final = buildTargets(X_val_pre_final, alph=alph, volity_int = volity_val)\n",
        "y_test_pre_final = buildTargets(X_test_pre_final, alph=alph, volity_int = volity_val)"
      ],
      "metadata": {
        "id": "4aYPOa7INyAl"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_class_distribution(obj):\n",
        "    count_dict = {\n",
        "        \"up\": 0,\n",
        "        \"down\": 0,\n",
        "        \"flat\": 0,\n",
        "    }\n",
        "    \n",
        "    for i in obj:\n",
        "        if i == 2: \n",
        "            count_dict['up'] += 1\n",
        "        elif i == 1: \n",
        "            count_dict['down'] += 1\n",
        "        elif i == 0: \n",
        "            count_dict['flat'] += 1             \n",
        "        else:\n",
        "            print(\"Check classes.\")\n",
        "            \n",
        "    return count_dict"
      ],
      "metadata": {
        "id": "vWIY2rwEYCfM"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(25,7))\n",
        "# Train\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_train_pre_final)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[0]).set_title('Class Distribution in Train Set')\n",
        "# Validation\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_val_pre_final)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[1]).set_title('Class Distribution in Val Set')\n",
        "# Test\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_test_pre_final)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[2]).set_title('Class Distribution in Test Set')"
      ],
      "metadata": {
        "id": "-BsVCfr8YCiX",
        "outputId": "605996de-5ab0-4794-f38c-8c3beaaf893d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        }
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Class Distribution in Test Set')"
            ]
          },
          "metadata": {},
          "execution_count": 112
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x504 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def createFinalData_RemoveLateAfternoonData(arr, labels):\n",
        "\n",
        "  assert arr.shape[0] == len(labels), \"X data do not match length of y labels\"\n",
        "\n",
        "  step_count = 0\n",
        "  filtered_y_labels = []\n",
        "\n",
        "  for i in range(arr.shape[0]):\n",
        "\n",
        "    if i == 0:\n",
        "      final_arr = arr[i]\n",
        "      filtered_y_labels.append(labels[i])\n",
        "      #print(f'Appending index {i}, step_count: {step_count}')\n",
        "      step_count += 1\n",
        "\n",
        "    elif i == 1:\n",
        "\n",
        "      final_arr = np.stack((final_arr, arr[i]))\n",
        "      filtered_y_labels.append(labels[i])\n",
        "      step_count += 1\n",
        "\n",
        "    elif step_count == 0: \n",
        "      final_arr = np.vstack((final_arr, arr[i][None]))\n",
        "      filtered_y_labels.append(labels[i])\n",
        "      #print(f'Appending index {i}, step_count: {step_count}')\n",
        "      step_count += 1\n",
        "    \n",
        "    elif (step_count) % 5 == 0:\n",
        "      #print(f'skipping {i} array, step_count: {step_count}')\n",
        "      step_count += 1\n",
        "\n",
        "    elif (step_count) % 6 == 0:\n",
        "      #print(f'skipping {i} array, step_count: {step_count}')\n",
        "      step_count += 1\n",
        "\n",
        "    elif (step_count) % 7 == 0:\n",
        "      #print(f'skipping {i} array, step_count: {step_count}')\n",
        "      step_count = 0\n",
        "    \n",
        "    else:\n",
        "      final_arr = np.vstack((final_arr, arr[i][None]))\n",
        "      filtered_y_labels.append(labels[i])\n",
        "      #print(f'Appending index {i}, step_count: {step_count}')\n",
        "      step_count += 1\n",
        "  \n",
        "  return final_arr, filtered_y_labels\n",
        "\n",
        "X_train, y_train = createFinalData_RemoveLateAfternoonData(X_train_pre_final, y_train_pre_final)\n",
        "X_val, y_val = createFinalData_RemoveLateAfternoonData(X_val_pre_final, y_val_pre_final)\n",
        "X_test, y_test = createFinalData_RemoveLateAfternoonData(X_test_pre_final, y_test_pre_final)\n",
        "\n",
        "y_train = np.array(y_train)\n",
        "y_val = np.array(y_val)\n",
        "y_test = np.array(y_test)\n",
        "\n",
        "### EXECUTE IF YOU WANT FULL DATA, AND NOT REMOVING END OF DAT###########\n",
        "# y_train = np.array(y_train_pre_final)\n",
        "# y_val = np.array(y_val_pre_final)\n",
        "# y_test = np.array(y_test_pre_final)\n",
        "\n",
        "# X_train = X_train_pre_final\n",
        "# X_val = X_val_pre_final\n",
        "# X_test = X_test_pre_final"
      ],
      "metadata": {
        "id": "1XdpMcVCo2_b"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check it arrays are made correctly\n",
        "train[12:48]"
      ],
      "metadata": {
        "id": "ZyvritE4qPNR",
        "outputId": "99547955-026a-4e8a-e732-0460cf542269",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-2a7ad845-4eb5-49d9-8963-f4edfe952776\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>VolumeWeightedAvgPrice</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:30:00-05:00</th>\n",
              "      <td>18.8600</td>\n",
              "      <td>18.8600</td>\n",
              "      <td>18.8600</td>\n",
              "      <td>18.8600</td>\n",
              "      <td>500.0</td>\n",
              "      <td>18.860000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:35:00-05:00</th>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8400</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>18.8300</td>\n",
              "      <td>26000.0</td>\n",
              "      <td>18.839275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:40:00-05:00</th>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8201</td>\n",
              "      <td>18.8100</td>\n",
              "      <td>18.8100</td>\n",
              "      <td>700.0</td>\n",
              "      <td>18.815743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:45:00-05:00</th>\n",
              "      <td>18.8100</td>\n",
              "      <td>18.8250</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>4991.0</td>\n",
              "      <td>18.814949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:50:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 10:55:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:00:00-05:00</th>\n",
              "      <td>18.8355</td>\n",
              "      <td>18.8355</td>\n",
              "      <td>18.8355</td>\n",
              "      <td>18.8355</td>\n",
              "      <td>130.0</td>\n",
              "      <td>18.835500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:05:00-05:00</th>\n",
              "      <td>18.8308</td>\n",
              "      <td>18.8386</td>\n",
              "      <td>18.8308</td>\n",
              "      <td>18.8386</td>\n",
              "      <td>525.0</td>\n",
              "      <td>18.833771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:10:00-05:00</th>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8215</td>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8201</td>\n",
              "      <td>1225.0</td>\n",
              "      <td>18.820296</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:15:00-05:00</th>\n",
              "      <td>18.8420</td>\n",
              "      <td>18.8420</td>\n",
              "      <td>18.8301</td>\n",
              "      <td>18.8301</td>\n",
              "      <td>800.0</td>\n",
              "      <td>18.838518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:20:00-05:00</th>\n",
              "      <td>18.8301</td>\n",
              "      <td>18.8301</td>\n",
              "      <td>18.8301</td>\n",
              "      <td>18.8301</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:25:00-05:00</th>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8200</td>\n",
              "      <td>18.8200</td>\n",
              "      <td>200.0</td>\n",
              "      <td>18.820000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:30:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>2400.0</td>\n",
              "      <td>18.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:35:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>600.0</td>\n",
              "      <td>18.790000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:40:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>100.0</td>\n",
              "      <td>18.780000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:45:00-05:00</th>\n",
              "      <td>18.7999</td>\n",
              "      <td>18.7999</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>2100.0</td>\n",
              "      <td>18.798952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:50:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 11:55:00-05:00</th>\n",
              "      <td>18.7820</td>\n",
              "      <td>18.7820</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>1700.0</td>\n",
              "      <td>18.776282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:00:00-05:00</th>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>18.7700</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:05:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "      <td>18.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:10:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:15:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:20:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.7902</td>\n",
              "      <td>18.7902</td>\n",
              "      <td>200.0</td>\n",
              "      <td>18.795100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:25:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>100.0</td>\n",
              "      <td>18.790000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:30:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>500.0</td>\n",
              "      <td>18.780000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:35:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:40:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:45:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:50:00-05:00</th>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>18.7800</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 12:55:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "      <td>18.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:00:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:05:00-05:00</th>\n",
              "      <td>18.7903</td>\n",
              "      <td>18.7903</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>700.0</td>\n",
              "      <td>18.790129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:10:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:15:00-05:00</th>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>18.7900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:20:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>100.0</td>\n",
              "      <td>18.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-12-20 13:25:00-05:00</th>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>18.8000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a7ad845-4eb5-49d9-8963-f4edfe952776')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2a7ad845-4eb5-49d9-8963-f4edfe952776 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2a7ad845-4eb5-49d9-8963-f4edfe952776');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                              Open     High      Low    Close   Volume  \\\n",
              "Time                                                                     \n",
              "2016-12-20 10:30:00-05:00  18.8600  18.8600  18.8600  18.8600    500.0   \n",
              "2016-12-20 10:35:00-05:00  18.8400  18.8400  18.8300  18.8300  26000.0   \n",
              "2016-12-20 10:40:00-05:00  18.8200  18.8201  18.8100  18.8100    700.0   \n",
              "2016-12-20 10:45:00-05:00  18.8100  18.8250  18.8000  18.8000   4991.0   \n",
              "2016-12-20 10:50:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "2016-12-20 10:55:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "2016-12-20 11:00:00-05:00  18.8355  18.8355  18.8355  18.8355    130.0   \n",
              "2016-12-20 11:05:00-05:00  18.8308  18.8386  18.8308  18.8386    525.0   \n",
              "2016-12-20 11:10:00-05:00  18.8200  18.8215  18.8200  18.8201   1225.0   \n",
              "2016-12-20 11:15:00-05:00  18.8420  18.8420  18.8301  18.8301    800.0   \n",
              "2016-12-20 11:20:00-05:00  18.8301  18.8301  18.8301  18.8301      0.0   \n",
              "2016-12-20 11:25:00-05:00  18.8200  18.8200  18.8200  18.8200    200.0   \n",
              "2016-12-20 11:30:00-05:00  18.8000  18.8000  18.8000  18.8000   2400.0   \n",
              "2016-12-20 11:35:00-05:00  18.7900  18.7900  18.7900  18.7900    600.0   \n",
              "2016-12-20 11:40:00-05:00  18.7800  18.7800  18.7800  18.7800    100.0   \n",
              "2016-12-20 11:45:00-05:00  18.7999  18.7999  18.7800  18.7800   2100.0   \n",
              "2016-12-20 11:50:00-05:00  18.7800  18.7800  18.7800  18.7800      0.0   \n",
              "2016-12-20 11:55:00-05:00  18.7820  18.7820  18.7700  18.7700   1700.0   \n",
              "2016-12-20 12:00:00-05:00  18.7700  18.7700  18.7700  18.7700      0.0   \n",
              "2016-12-20 12:05:00-05:00  18.8000  18.8000  18.8000  18.8000    100.0   \n",
              "2016-12-20 12:10:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "2016-12-20 12:15:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "2016-12-20 12:20:00-05:00  18.8000  18.8000  18.7902  18.7902    200.0   \n",
              "2016-12-20 12:25:00-05:00  18.7900  18.7900  18.7900  18.7900    100.0   \n",
              "2016-12-20 12:30:00-05:00  18.7800  18.7800  18.7800  18.7800    500.0   \n",
              "2016-12-20 12:35:00-05:00  18.7800  18.7800  18.7800  18.7800      0.0   \n",
              "2016-12-20 12:40:00-05:00  18.7800  18.7800  18.7800  18.7800      0.0   \n",
              "2016-12-20 12:45:00-05:00  18.7800  18.7800  18.7800  18.7800      0.0   \n",
              "2016-12-20 12:50:00-05:00  18.7800  18.7800  18.7800  18.7800      0.0   \n",
              "2016-12-20 12:55:00-05:00  18.8000  18.8000  18.8000  18.8000    100.0   \n",
              "2016-12-20 13:00:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "2016-12-20 13:05:00-05:00  18.7903  18.7903  18.7900  18.7900    700.0   \n",
              "2016-12-20 13:10:00-05:00  18.7900  18.7900  18.7900  18.7900      0.0   \n",
              "2016-12-20 13:15:00-05:00  18.7900  18.7900  18.7900  18.7900      0.0   \n",
              "2016-12-20 13:20:00-05:00  18.8000  18.8000  18.8000  18.8000    100.0   \n",
              "2016-12-20 13:25:00-05:00  18.8000  18.8000  18.8000  18.8000      0.0   \n",
              "\n",
              "                           VolumeWeightedAvgPrice  \n",
              "Time                                               \n",
              "2016-12-20 10:30:00-05:00               18.860000  \n",
              "2016-12-20 10:35:00-05:00               18.839275  \n",
              "2016-12-20 10:40:00-05:00               18.815743  \n",
              "2016-12-20 10:45:00-05:00               18.814949  \n",
              "2016-12-20 10:50:00-05:00                0.000000  \n",
              "2016-12-20 10:55:00-05:00                0.000000  \n",
              "2016-12-20 11:00:00-05:00               18.835500  \n",
              "2016-12-20 11:05:00-05:00               18.833771  \n",
              "2016-12-20 11:10:00-05:00               18.820296  \n",
              "2016-12-20 11:15:00-05:00               18.838518  \n",
              "2016-12-20 11:20:00-05:00                0.000000  \n",
              "2016-12-20 11:25:00-05:00               18.820000  \n",
              "2016-12-20 11:30:00-05:00               18.800000  \n",
              "2016-12-20 11:35:00-05:00               18.790000  \n",
              "2016-12-20 11:40:00-05:00               18.780000  \n",
              "2016-12-20 11:45:00-05:00               18.798952  \n",
              "2016-12-20 11:50:00-05:00                0.000000  \n",
              "2016-12-20 11:55:00-05:00               18.776282  \n",
              "2016-12-20 12:00:00-05:00                0.000000  \n",
              "2016-12-20 12:05:00-05:00               18.800000  \n",
              "2016-12-20 12:10:00-05:00                0.000000  \n",
              "2016-12-20 12:15:00-05:00                0.000000  \n",
              "2016-12-20 12:20:00-05:00               18.795100  \n",
              "2016-12-20 12:25:00-05:00               18.790000  \n",
              "2016-12-20 12:30:00-05:00               18.780000  \n",
              "2016-12-20 12:35:00-05:00                0.000000  \n",
              "2016-12-20 12:40:00-05:00                0.000000  \n",
              "2016-12-20 12:45:00-05:00                0.000000  \n",
              "2016-12-20 12:50:00-05:00                0.000000  \n",
              "2016-12-20 12:55:00-05:00               18.800000  \n",
              "2016-12-20 13:00:00-05:00                0.000000  \n",
              "2016-12-20 13:05:00-05:00               18.790129  \n",
              "2016-12-20 13:10:00-05:00                0.000000  \n",
              "2016-12-20 13:15:00-05:00                0.000000  \n",
              "2016-12-20 13:20:00-05:00               18.800000  \n",
              "2016-12-20 13:25:00-05:00                0.000000  "
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.set_printoptions(threshold=200)\n",
        "y_train_pre_final[50:75]"
      ],
      "metadata": {
        "id": "Bi-1VYrmn0Eb",
        "outputId": "7fcb9f52-0b89-4536-f3eb-d8767159febb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 1, 2, 0, 1, 2, 0, 0, 1, 0, 1, 2, 1, 2, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "######\n",
        "# Code fro scaling at a later date\n",
        "######\n",
        "\n",
        "# from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scalers = {}\n",
        "for i in range(X_train.shape[1]):\n",
        "    scalers[i] = MinMaxScaler()\n",
        "    X_train[:, i, :] = scalers[i].fit_transform(X_train[:, i, :]) \n",
        "\n",
        "for i in range(X_val.shape[1]):\n",
        "    X_val[:, i, :] = scalers[i].transform(X_val[:, i, :]) \n",
        "\n",
        "for i in range(X_test.shape[1]):\n",
        "    X_test[:, i, :] = scalers[i].transform(X_test[:, i, :]) \n",
        "    "
      ],
      "metadata": {
        "id": "xPkrkhqV4Ef-"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vbfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(25,7))\n",
        "# Train\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_train)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[0]).set_title('Class Distribution in Train Set')\n",
        "# Validation\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_val)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[1]).set_title('Class Distribution in Val Set')\n",
        "# Test\n",
        "sns.barplot(data = pd.DataFrame.from_dict([get_class_distribution(y_test)]).melt(), x = \"variable\", y=\"value\", hue=\"variable\",  ax=axes[2]).set_title('Class Distribution in Test Set')"
      ],
      "metadata": {
        "outputId": "43914e89-0715-4fb1-b1d2-8fdf574d9310",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 379
        },
        "id": "qqTz9-J7LGft"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Class Distribution in Test Set')"
            ]
          },
          "metadata": {},
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1800x504 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# SET UP FOR LTSM 2D CNN"
      ],
      "metadata": {
        "id": "ROPyZy946We9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_full = np.concatenate((X_train, X_val, X_test))\n",
        "y_full = np.concatenate((y_train, y_val, y_test))\n",
        "\n",
        "\n",
        "X_train, X_next, y_train, y_next = train_test_split(X_full, y_full, test_size=0.4, random_state=82)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_next, y_next, test_size=0.3, random_state=101)"
      ],
      "metadata": {
        "id": "YzswRgTXVe9K"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers.convolutional import Convolution2D\n",
        "from keras.layers.convolutional import MaxPooling2D\n",
        "from keras.layers.core import Flatten, Dense, Activation\n",
        "from keras import backend as K\n",
        "from keras.callbacks import EarlyStopping, Callback\n",
        "from keras.utils import np_utils\n",
        "from keras.utils.vis_utils import plot_model\n",
        "from tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D, Dropout\n",
        "from tensorflow.keras.optimizers import Adam, Nadam\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from datetime import datetime\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, BatchNormalization\n",
        "from keras.layers import Flatten\n",
        "from keras.layers import Dropout\n",
        "from keras.models import Input, Model\n",
        "from keras.layers.convolutional import Conv1D\n",
        "from keras.layers.convolutional import MaxPooling1D\n",
        "from tensorflow.keras.optimizers import Adam, Nadam"
      ],
      "metadata": {
        "id": "ocDxaa6hHAuR"
      },
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x2XIc20R6VXF",
        "outputId": "5b91349a-cf62-44a9-a156-b6cd816a4e7e"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1981, 5, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_lstm = np.array([])\n",
        "\n",
        "for arr in X_train:\n",
        "\n",
        "  if X_train_lstm.size == 0:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_train_lstm = int_array\n",
        "\n",
        "  else:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_train_lstm = np.concatenate((X_train_lstm, int_array))\n",
        "\n",
        "\n",
        "X_val_lstm= np.array([])\n",
        "\n",
        "for arr in X_val:\n",
        "\n",
        "  if X_val_lstm.size == 0:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_val_lstm = int_array\n",
        "\n",
        "  else:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_val_lstm = np.concatenate((X_val_lstm, int_array))\n",
        "\n",
        "X_test_lstm = np.array([])\n",
        "\n",
        "for arr in X_test:\n",
        "\n",
        "  if X_test_lstm.size == 0:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_test_lstm = int_array\n",
        "\n",
        "  else:\n",
        "    int_array = np.array(np.hsplit(arr, 4)).reshape(1, 4, 5, 6, 1)\n",
        "    X_test_lstm = np.concatenate((X_test_lstm, int_array))"
      ],
      "metadata": {
        "id": "ewm4CLld73pj"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train_final = to_categorical(y_train, 3)\n",
        "y_val_final = to_categorical(y_val, 3)\n",
        "y_test_final = to_categorical(y_test, 3)\n",
        "\n",
        "print(f'X Train Length {X_train_lstm.shape}, y Train Label Length {y_train.shape}')\n",
        "print(f'X Val Length {X_val_lstm.shape}, y Val Label Length {y_val.shape}')\n",
        "print(f'X Test Length {X_test_lstm.shape}, y Test Label Length {y_test.shape}')"
      ],
      "metadata": {
        "id": "U2NiV6wWWFKd",
        "outputId": "b68f8bfb-54fd-40f8-9d19-af635400598e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X Train Length (1981, 4, 5, 6, 1), y Train Label Length (1981,)\n",
            "X Val Length (925, 4, 5, 6, 1), y Val Label Length (925,)\n",
            "X Test Length (397, 4, 5, 6, 1), y Test Label Length (397,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "# Construct the input layer with no definite frame size.\n",
        "inp = layers.Input(shape=(X_train_lstm.shape[1:]))\n",
        "\n",
        "# We will construct 3 `ConvLSTM2D` layers with batch normalization,\n",
        "# followed by a `Conv3D` layer for the spatiotemporal outputs.\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=32,\n",
        "    kernel_size=(5, 5),\n",
        "    strides=(1, 1),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(inp)\n",
        "x = layers.BatchNormalization()(x)\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=64,\n",
        "    kernel_size=(1, 3),\n",
        "    strides=(1, 1),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(x)\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=64,\n",
        "    kernel_size=(5, 1),\n",
        "    strides=(1, 1),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(x)\n",
        "# x = layers.ConvLSTM2D(\n",
        "#     filters=128,\n",
        "#     kernel_size=(5, 1),\n",
        "#     strides=(1, 3),\n",
        "#     padding=\"same\",\n",
        "#     return_sequences=True,\n",
        "#     activation=\"relu\",\n",
        "# )(x)\n",
        "x = layers.Conv2D(\n",
        "    filters=128, kernel_size=(1, 3), strides=(1, 3), activation=\"relu\", padding=\"same\"\n",
        ")(x)\n",
        "x = layers.Flatten()(x)\n",
        "x = layers.Dense(1000,activation=\"relu\")(x)\n",
        "x = layers.Dense(500,activation=\"relu\")(x)\n",
        "x = layers.Dense(3,activation=\"softmax\")(x)\n",
        "\n",
        "# Next, we will build the complete model and compile it.\n",
        "model = keras.models.Model(inp, x)\n",
        "model.summary()"
      ],
      "metadata": {
        "id": "RfQ7Z_u2HyEm",
        "outputId": "4584646a-2242-403d-cebb-cbb3d1fe5b30",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_20\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_21 (InputLayer)       [(None, 4, 5, 6, 1)]      0         \n",
            "                                                                 \n",
            " conv_lstm2d_43 (ConvLSTM2D)  (None, 4, 5, 6, 32)      105728    \n",
            "                                                                 \n",
            " batch_normalization_14 (Bat  (None, 4, 5, 6, 32)      128       \n",
            " chNormalization)                                                \n",
            "                                                                 \n",
            " conv_lstm2d_44 (ConvLSTM2D)  (None, 4, 5, 6, 64)      73984     \n",
            "                                                                 \n",
            " conv_lstm2d_45 (ConvLSTM2D)  (None, 4, 5, 6, 64)      164096    \n",
            "                                                                 \n",
            " conv2d_8 (Conv2D)           (None, 4, 5, 2, 128)      24704     \n",
            "                                                                 \n",
            " flatten_20 (Flatten)        (None, 5120)              0         \n",
            "                                                                 \n",
            " dense_57 (Dense)            (None, 1000)              5121000   \n",
            "                                                                 \n",
            " dense_58 (Dense)            (None, 500)               500500    \n",
            "                                                                 \n",
            " dense_59 (Dense)            (None, 3)                 1503      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 5,991,643\n",
            "Trainable params: 5,991,579\n",
            "Non-trainable params: 64\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(\n",
        "    loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),\n",
        "    metrics = [\"accuracy\"]\n",
        ")\n",
        "\n",
        "early_stopping = keras.callbacks.EarlyStopping(monitor=\"loss\", patience=10)\n",
        "reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\"loss\", patience=5)\n",
        "\n",
        "# Define modifiable training hyperparameters.\n",
        "epochs = 100\n",
        "batch_size = 12\n",
        "\n",
        "# Fit the model to the training data.\n",
        "hist = model.fit(\n",
        "    X_train_lstm,\n",
        "    y_train_final,\n",
        "    batch_size=batch_size,\n",
        "    epochs=epochs,\n",
        "    validation_data=(X_val_lstm, y_val_final),\n",
        "    callbacks=[reduce_lr, early_stopping],\n",
        "    # class_weight={0:1, 1:1.25, 2:1.25},\n",
        ")\n",
        "model_name = f'cdt2d_model_{date}'"
      ],
      "metadata": {
        "id": "rdVGgv-kWRHx",
        "outputId": "addfd26b-d4a9-4d18-a66a-e2357f2d2b40",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "166/166 [==============================] - 20s 77ms/step - loss: 1.0876 - accuracy: 0.4149 - val_loss: 1.0776 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 2/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0842 - accuracy: 0.4195 - val_loss: 1.0782 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 3/100\n",
            "166/166 [==============================] - 12s 75ms/step - loss: 1.0835 - accuracy: 0.4190 - val_loss: 1.0791 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 4/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0835 - accuracy: 0.4185 - val_loss: 1.0725 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 5/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0801 - accuracy: 0.4195 - val_loss: 1.0720 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 6/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0789 - accuracy: 0.4175 - val_loss: 1.0713 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 7/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0881 - accuracy: 0.4230 - val_loss: 1.0718 - val_accuracy: 0.4454 - lr: 0.0010\n",
            "Epoch 8/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0819 - accuracy: 0.4144 - val_loss: 1.0697 - val_accuracy: 0.4259 - lr: 0.0010\n",
            "Epoch 9/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0779 - accuracy: 0.4210 - val_loss: 1.0691 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 10/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0794 - accuracy: 0.4195 - val_loss: 1.0718 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 11/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0786 - accuracy: 0.4154 - val_loss: 1.0684 - val_accuracy: 0.4357 - lr: 0.0010\n",
            "Epoch 12/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0787 - accuracy: 0.4200 - val_loss: 1.0715 - val_accuracy: 0.4216 - lr: 0.0010\n",
            "Epoch 13/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0780 - accuracy: 0.4205 - val_loss: 1.0752 - val_accuracy: 0.4346 - lr: 0.0010\n",
            "Epoch 14/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0791 - accuracy: 0.4210 - val_loss: 1.0939 - val_accuracy: 0.4303 - lr: 0.0010\n",
            "Epoch 15/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0738 - accuracy: 0.4215 - val_loss: 1.0728 - val_accuracy: 0.4227 - lr: 1.0000e-04\n",
            "Epoch 16/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0729 - accuracy: 0.4220 - val_loss: 1.0740 - val_accuracy: 0.4227 - lr: 1.0000e-04\n",
            "Epoch 17/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0713 - accuracy: 0.4250 - val_loss: 1.0730 - val_accuracy: 0.4249 - lr: 1.0000e-04\n",
            "Epoch 18/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0720 - accuracy: 0.4271 - val_loss: 1.0750 - val_accuracy: 0.4205 - lr: 1.0000e-04\n",
            "Epoch 19/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0714 - accuracy: 0.4250 - val_loss: 1.0751 - val_accuracy: 0.4227 - lr: 1.0000e-04\n",
            "Epoch 20/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0711 - accuracy: 0.4255 - val_loss: 1.0762 - val_accuracy: 0.4216 - lr: 1.0000e-04\n",
            "Epoch 21/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0695 - accuracy: 0.4281 - val_loss: 1.0769 - val_accuracy: 0.4249 - lr: 1.0000e-04\n",
            "Epoch 22/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0684 - accuracy: 0.4271 - val_loss: 1.0806 - val_accuracy: 0.4259 - lr: 1.0000e-04\n",
            "Epoch 23/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0698 - accuracy: 0.4260 - val_loss: 1.0776 - val_accuracy: 0.4249 - lr: 1.0000e-04\n",
            "Epoch 24/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0691 - accuracy: 0.4291 - val_loss: 1.0820 - val_accuracy: 0.4259 - lr: 1.0000e-04\n",
            "Epoch 25/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0688 - accuracy: 0.4296 - val_loss: 1.0797 - val_accuracy: 0.4249 - lr: 1.0000e-04\n",
            "Epoch 26/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0681 - accuracy: 0.4316 - val_loss: 1.0810 - val_accuracy: 0.4249 - lr: 1.0000e-04\n",
            "Epoch 27/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0668 - accuracy: 0.4331 - val_loss: 1.0863 - val_accuracy: 0.4292 - lr: 1.0000e-04\n",
            "Epoch 28/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0658 - accuracy: 0.4326 - val_loss: 1.0813 - val_accuracy: 0.4314 - lr: 1.0000e-04\n",
            "Epoch 29/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0633 - accuracy: 0.4351 - val_loss: 1.0786 - val_accuracy: 0.4432 - lr: 1.0000e-04\n",
            "Epoch 30/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0614 - accuracy: 0.4407 - val_loss: 1.0902 - val_accuracy: 0.4270 - lr: 1.0000e-04\n",
            "Epoch 31/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0610 - accuracy: 0.4361 - val_loss: 1.0943 - val_accuracy: 0.4389 - lr: 1.0000e-04\n",
            "Epoch 32/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0632 - accuracy: 0.4387 - val_loss: 1.1030 - val_accuracy: 0.4378 - lr: 1.0000e-04\n",
            "Epoch 33/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0588 - accuracy: 0.4442 - val_loss: 1.1012 - val_accuracy: 0.4432 - lr: 1.0000e-04\n",
            "Epoch 34/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0574 - accuracy: 0.4457 - val_loss: 1.1045 - val_accuracy: 0.4389 - lr: 1.0000e-04\n",
            "Epoch 35/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0584 - accuracy: 0.4402 - val_loss: 1.0997 - val_accuracy: 0.4346 - lr: 1.0000e-04\n",
            "Epoch 36/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0544 - accuracy: 0.4417 - val_loss: 1.1082 - val_accuracy: 0.4346 - lr: 1.0000e-04\n",
            "Epoch 37/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0538 - accuracy: 0.4442 - val_loss: 1.1342 - val_accuracy: 0.4184 - lr: 1.0000e-04\n",
            "Epoch 38/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0561 - accuracy: 0.4437 - val_loss: 1.1074 - val_accuracy: 0.4368 - lr: 1.0000e-04\n",
            "Epoch 39/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0507 - accuracy: 0.4493 - val_loss: 1.1115 - val_accuracy: 0.4400 - lr: 1.0000e-04\n",
            "Epoch 40/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0529 - accuracy: 0.4467 - val_loss: 1.1157 - val_accuracy: 0.4508 - lr: 1.0000e-04\n",
            "Epoch 41/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0520 - accuracy: 0.4457 - val_loss: 1.1271 - val_accuracy: 0.4389 - lr: 1.0000e-04\n",
            "Epoch 42/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0487 - accuracy: 0.4513 - val_loss: 1.1207 - val_accuracy: 0.4519 - lr: 1.0000e-04\n",
            "Epoch 43/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0477 - accuracy: 0.4513 - val_loss: 1.1252 - val_accuracy: 0.4486 - lr: 1.0000e-04\n",
            "Epoch 44/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0476 - accuracy: 0.4478 - val_loss: 1.1271 - val_accuracy: 0.4573 - lr: 1.0000e-04\n",
            "Epoch 45/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0469 - accuracy: 0.4538 - val_loss: 1.1493 - val_accuracy: 0.4497 - lr: 1.0000e-04\n",
            "Epoch 46/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0472 - accuracy: 0.4533 - val_loss: 1.1564 - val_accuracy: 0.4497 - lr: 1.0000e-04\n",
            "Epoch 47/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0462 - accuracy: 0.4533 - val_loss: 1.1511 - val_accuracy: 0.4562 - lr: 1.0000e-04\n",
            "Epoch 48/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0471 - accuracy: 0.4538 - val_loss: 1.1745 - val_accuracy: 0.4562 - lr: 1.0000e-04\n",
            "Epoch 49/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0445 - accuracy: 0.4543 - val_loss: 1.1658 - val_accuracy: 0.4573 - lr: 1.0000e-04\n",
            "Epoch 50/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0486 - accuracy: 0.4513 - val_loss: 1.1550 - val_accuracy: 0.4551 - lr: 1.0000e-04\n",
            "Epoch 51/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0609 - accuracy: 0.4498 - val_loss: 1.1412 - val_accuracy: 0.4368 - lr: 1.0000e-04\n",
            "Epoch 52/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0475 - accuracy: 0.4503 - val_loss: 1.1474 - val_accuracy: 0.4486 - lr: 1.0000e-04\n",
            "Epoch 53/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0469 - accuracy: 0.4508 - val_loss: 1.1512 - val_accuracy: 0.4562 - lr: 1.0000e-04\n",
            "Epoch 54/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0433 - accuracy: 0.4558 - val_loss: 1.1529 - val_accuracy: 0.4584 - lr: 1.0000e-04\n",
            "Epoch 55/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0434 - accuracy: 0.4619 - val_loss: 1.1629 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 56/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0425 - accuracy: 0.4649 - val_loss: 1.1658 - val_accuracy: 0.4530 - lr: 1.0000e-04\n",
            "Epoch 57/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0441 - accuracy: 0.4548 - val_loss: 1.1657 - val_accuracy: 0.4573 - lr: 1.0000e-04\n",
            "Epoch 58/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0389 - accuracy: 0.4553 - val_loss: 1.1774 - val_accuracy: 0.4519 - lr: 1.0000e-04\n",
            "Epoch 59/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0404 - accuracy: 0.4614 - val_loss: 1.1985 - val_accuracy: 0.4508 - lr: 1.0000e-04\n",
            "Epoch 60/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0427 - accuracy: 0.4548 - val_loss: 1.1965 - val_accuracy: 0.4508 - lr: 1.0000e-04\n",
            "Epoch 61/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0408 - accuracy: 0.4563 - val_loss: 1.2442 - val_accuracy: 0.4562 - lr: 1.0000e-04\n",
            "Epoch 62/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0420 - accuracy: 0.4488 - val_loss: 1.2053 - val_accuracy: 0.4551 - lr: 1.0000e-04\n",
            "Epoch 63/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0380 - accuracy: 0.4624 - val_loss: 1.1933 - val_accuracy: 0.4584 - lr: 1.0000e-04\n",
            "Epoch 64/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0397 - accuracy: 0.4594 - val_loss: 1.2116 - val_accuracy: 0.4476 - lr: 1.0000e-04\n",
            "Epoch 65/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0381 - accuracy: 0.4584 - val_loss: 1.2288 - val_accuracy: 0.4627 - lr: 1.0000e-04\n",
            "Epoch 66/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0364 - accuracy: 0.4634 - val_loss: 1.1985 - val_accuracy: 0.4616 - lr: 1.0000e-04\n",
            "Epoch 67/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0386 - accuracy: 0.4543 - val_loss: 1.2343 - val_accuracy: 0.4638 - lr: 1.0000e-04\n",
            "Epoch 68/100\n",
            "166/166 [==============================] - 12s 75ms/step - loss: 1.0366 - accuracy: 0.4599 - val_loss: 1.2246 - val_accuracy: 0.4551 - lr: 1.0000e-04\n",
            "Epoch 69/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0380 - accuracy: 0.4629 - val_loss: 1.2160 - val_accuracy: 0.4649 - lr: 1.0000e-04\n",
            "Epoch 70/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0353 - accuracy: 0.4609 - val_loss: 1.2796 - val_accuracy: 0.4541 - lr: 1.0000e-04\n",
            "Epoch 71/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0329 - accuracy: 0.4624 - val_loss: 1.2757 - val_accuracy: 0.4541 - lr: 1.0000e-04\n",
            "Epoch 72/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0331 - accuracy: 0.4634 - val_loss: 1.2782 - val_accuracy: 0.4486 - lr: 1.0000e-04\n",
            "Epoch 73/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0353 - accuracy: 0.4584 - val_loss: 1.2900 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 74/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0349 - accuracy: 0.4619 - val_loss: 1.2881 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 75/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0328 - accuracy: 0.4654 - val_loss: 1.3015 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 76/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0339 - accuracy: 0.4690 - val_loss: 1.2796 - val_accuracy: 0.4551 - lr: 1.0000e-04\n",
            "Epoch 77/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0314 - accuracy: 0.4664 - val_loss: 1.3040 - val_accuracy: 0.4605 - lr: 1.0000e-04\n",
            "Epoch 78/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0334 - accuracy: 0.4639 - val_loss: 1.2783 - val_accuracy: 0.4649 - lr: 1.0000e-04\n",
            "Epoch 79/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0296 - accuracy: 0.4700 - val_loss: 1.2511 - val_accuracy: 0.4703 - lr: 1.0000e-04\n",
            "Epoch 80/100\n",
            "166/166 [==============================] - 12s 74ms/step - loss: 1.0307 - accuracy: 0.4705 - val_loss: 1.3094 - val_accuracy: 0.4508 - lr: 1.0000e-04\n",
            "Epoch 81/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0309 - accuracy: 0.4594 - val_loss: 1.3256 - val_accuracy: 0.4530 - lr: 1.0000e-04\n",
            "Epoch 82/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0275 - accuracy: 0.4730 - val_loss: 1.2993 - val_accuracy: 0.4649 - lr: 1.0000e-04\n",
            "Epoch 83/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0274 - accuracy: 0.4730 - val_loss: 1.3179 - val_accuracy: 0.4638 - lr: 1.0000e-04\n",
            "Epoch 84/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0274 - accuracy: 0.4690 - val_loss: 1.3560 - val_accuracy: 0.4659 - lr: 1.0000e-04\n",
            "Epoch 85/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0263 - accuracy: 0.4750 - val_loss: 1.3666 - val_accuracy: 0.4670 - lr: 1.0000e-04\n",
            "Epoch 86/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0278 - accuracy: 0.4685 - val_loss: 1.3323 - val_accuracy: 0.4724 - lr: 1.0000e-04\n",
            "Epoch 87/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0265 - accuracy: 0.4679 - val_loss: 1.3923 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 88/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0256 - accuracy: 0.4710 - val_loss: 1.3722 - val_accuracy: 0.4649 - lr: 1.0000e-04\n",
            "Epoch 89/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0260 - accuracy: 0.4700 - val_loss: 1.3904 - val_accuracy: 0.4595 - lr: 1.0000e-04\n",
            "Epoch 90/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0269 - accuracy: 0.4705 - val_loss: 1.4061 - val_accuracy: 0.4649 - lr: 1.0000e-04\n",
            "Epoch 91/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0226 - accuracy: 0.4740 - val_loss: 1.3192 - val_accuracy: 0.4757 - lr: 1.0000e-04\n",
            "Epoch 92/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0270 - accuracy: 0.4674 - val_loss: 1.7201 - val_accuracy: 0.4789 - lr: 1.0000e-04\n",
            "Epoch 93/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0229 - accuracy: 0.4674 - val_loss: 1.4260 - val_accuracy: 0.4616 - lr: 1.0000e-04\n",
            "Epoch 94/100\n",
            "166/166 [==============================] - 12s 73ms/step - loss: 1.0208 - accuracy: 0.4780 - val_loss: 1.4229 - val_accuracy: 0.4768 - lr: 1.0000e-04\n",
            "Epoch 95/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0201 - accuracy: 0.4644 - val_loss: 1.4755 - val_accuracy: 0.4497 - lr: 1.0000e-04\n",
            "Epoch 96/100\n",
            "166/166 [==============================] - 12s 71ms/step - loss: 1.0205 - accuracy: 0.4740 - val_loss: 1.4787 - val_accuracy: 0.4519 - lr: 1.0000e-04\n",
            "Epoch 97/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0212 - accuracy: 0.4700 - val_loss: 1.4390 - val_accuracy: 0.4659 - lr: 1.0000e-04\n",
            "Epoch 98/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0191 - accuracy: 0.4735 - val_loss: 1.5312 - val_accuracy: 0.4562 - lr: 1.0000e-04\n",
            "Epoch 99/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0165 - accuracy: 0.4775 - val_loss: 1.5214 - val_accuracy: 0.4616 - lr: 1.0000e-04\n",
            "Epoch 100/100\n",
            "166/166 [==============================] - 12s 72ms/step - loss: 1.0166 - accuracy: 0.4700 - val_loss: 1.6766 - val_accuracy: 0.4659 - lr: 1.0000e-04\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "  plt.figure(figsize=(8, 6))\n",
        "  plt.plot(hist.history['loss'], label='train loss')\n",
        "  plt.plot(hist.history['val_loss'], label='val loss')\n",
        "  plt.legend()\n",
        "  #plt.savefig(f'plots/LossVal_loss_{date}.png')\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "SstWcpuMIqw1",
        "outputId": "9e987a28-1ec7-4865-f865-18b4d522dae0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(hist.history['accuracy'], label='train acc')\n",
        "plt.plot(hist.history['val_accuracy'], label='val acc')\n",
        "plt.legend()\n",
        "#plt.savefig(f'plots/AccVal_acc_{date}.png')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "FeXVFnAKItr4",
        "outputId": "beb71749-80d8-4770-a08a-ba3fb490d8d6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test_lstm)\n",
        "\n",
        "\n",
        "# Calculate the accuracy\n",
        "test_preds = np.argmax(y_pred, axis=1)\n",
        "y_true = np.argmax(y_test_final, axis=1)\n",
        "test_acc = np.sum(test_preds == y_true)/y_true.shape[0]\n",
        "\n",
        "# Recall for each class\n",
        "recall_vals = []\n",
        "for i in range(3):\n",
        "    class_idx = np.argwhere(y_true==i)\n",
        "    total = len(class_idx)\n",
        "    correct = np.sum(test_preds[class_idx]==i)\n",
        "    recall = correct / total\n",
        "    recall_vals.append(recall)\n",
        "\n",
        "classes = [0,1,2]\n",
        "# Calculate the test set accuracy and recall for each class\n",
        "print('Test set accuracy is {:.3f}'.format(test_acc))\n",
        "for i in range(3):\n",
        "    print('For class {}, recall is {:.3f}'.format(classes[i],recall_vals[i]))\n",
        "\n",
        "print(\"Accuracy is {:.3f}\".format(test_acc))\n",
        "# print(\"Weighted F score is {:.3f}\".format(calculate_weighted_f_score(y_true, y_pred)))\n",
        "\n",
        "def plot_confusion_matrix(cm,\n",
        "                          target_names,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=None,\n",
        "                          normalize=True):\n",
        "    \"\"\"\n",
        "    given a sklearn confusion matrix (cm), make a nice plot\n",
        "\n",
        "    Arguments\n",
        "    ---------\n",
        "    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n",
        "\n",
        "    target_names: given classification classes such as [0, 1, 2]\n",
        "                  the class names, for example: ['high', 'medium', 'low']\n",
        "\n",
        "    title:        the text to display at the top of the matrix\n",
        "\n",
        "    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n",
        "                  see http://matplotlib.org/examples/color/colormaps_reference.html\n",
        "                  plt.get_cmap('jet') or plt.cm.Blues\n",
        "\n",
        "    normalize:    If False, plot the raw numbers\n",
        "                  If True, plot the proportions\n",
        "\n",
        "    Usage\n",
        "    -----\n",
        "    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n",
        "                                                              # sklearn.metrics.confusion_matrix\n",
        "                          normalize    = True,                # show proportions\n",
        "                          target_names = y_labels_vals,       # list of names of the classes\n",
        "                          title        = best_estimator_name) # title of graph\n",
        "\n",
        "    Citiation\n",
        "    ---------\n",
        "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    import itertools\n",
        "\n",
        "    accuracy = np.trace(cm) / np.sum(cm).astype('float')\n",
        "    misclass = 1 - accuracy\n",
        "\n",
        "    if cmap is None:\n",
        "        cmap = plt.get_cmap('Blues')\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "\n",
        "    if target_names is not None:\n",
        "        tick_marks = np.arange(len(target_names))\n",
        "        plt.xticks(tick_marks, target_names, rotation=45)\n",
        "        plt.yticks(tick_marks, target_names)\n",
        "\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "\n",
        "    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        if normalize:\n",
        "            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n",
        "                      horizontalalignment=\"center\",\n",
        "                      color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "        else:\n",
        "            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n",
        "                      horizontalalignment=\"center\",\n",
        "                      color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n",
        "    # plt.savefig(f'plots/Confusion_{date}.png')\n",
        "    plt.show()\n",
        "\n",
        "def calculate_weighted_f_score(y_true, y_pred):\n",
        "    test_preds = np.argmax(y_pred, axis=-1)\n",
        "    Ntu = sum((test_preds == 2) & (y_true == 2))\n",
        "    Ntd = sum((test_preds == 1) & (y_true == 1))\n",
        "    Ntf = sum((test_preds == 0) & (y_true == 0))\n",
        "    Ewutd = sum((test_preds == 2) & (y_true == 1))\n",
        "    Ewdtu = sum((test_preds == 1) & (y_true == 2))\n",
        "    Ewutf = sum((test_preds == 2) & (y_true == 0))\n",
        "    Ewdtf = sum((test_preds == 1) & (y_true == 0))\n",
        "    Ewftu = sum((test_preds == 0) & (y_true == 2))\n",
        "    Ewftd = sum((test_preds == 0) & (y_true == 1))\n",
        "\n",
        "    beta_1 = 0.5\n",
        "    beta_2 = 0.125\n",
        "    beta_3 = 0.125\n",
        "\n",
        "    Ntp = Ntu + Ntd + beta_3**2 * Ntf\n",
        "    E1 = Ewutd + Ewdtu\n",
        "    E2 = Ewutf + Ewdtf\n",
        "    E3 = Ewftu + Ewftd\n",
        "\n",
        "    F = (1 + beta_1**2 + beta_2**2) * Ntp / ((1+beta_1**2+beta_2**2) * Ntp + E1 + beta_1**2 * E2 + beta_2**2 * E3)\n",
        "    return  F\n",
        "\n",
        "\n",
        "print(f'Weight CDT F Score: {calculate_weighted_f_score(y_true, y_pred)}')\n",
        "\n",
        "nb_classes = 3\n",
        "\n",
        "# Confusion matrix\n",
        "conf_mat=confusion_matrix(y_true, np.argmax(y_pred, axis=-1))\n",
        "\n",
        "plot_confusion_matrix(conf_mat, [\"flat\", \"down\",\"up\"])\n",
        "\n",
        "precision_score(y_true, np.argmax(y_pred, axis=-1), average='weighted')\n",
        "\n",
        "print(classification_report(y_true, np.argmax(y_pred, axis=-1), target_names=[\"flat\", \"down\", \"up\"], digits=4))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 745
        },
        "id": "bvj9prC6D_-j",
        "outputId": "b618ea4b-52ca-4799-8be6-8a8fd926b92e"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test set accuracy is 0.436\n",
            "For class 0, recall is 0.742\n",
            "For class 1, recall is 0.108\n",
            "For class 2, recall is 0.342\n",
            "Accuracy is 0.436\n",
            "Weight CDT F Score: 0.5462475045607147\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        flat     0.4672    0.7423    0.5735       163\n",
            "        down     0.3611    0.1083    0.1667       120\n",
            "          up     0.3824    0.3421    0.3611       114\n",
            "\n",
            "    accuracy                         0.4358       397\n",
            "   macro avg     0.4035    0.3976    0.3671       397\n",
            "weighted avg     0.4108    0.4358    0.3895       397\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2D LSTM"
      ],
      "metadata": {
        "id": "gUcbWMXAaxdh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, BatchNormalization\n",
        "from keras.layers import Flatten\n",
        "from keras.layers import Dropout\n",
        "from keras.models import Input, Model\n",
        "from keras.layers.convolutional import Conv1D\n",
        "from keras.layers.convolutional import MaxPooling1D\n",
        "from tensorflow.keras.optimizers import Adam, Nadam"
      ],
      "metadata": {
        "id": "sNDocmcFba3b"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###### ONLY EXECUTE FOR KERAS 2D CNN #####\n",
        "\n",
        "X_train_2d = X_train.reshape(X_train.shape[0], \n",
        "                             1,\n",
        "                          X_train.shape[1], \n",
        "                          X_train.shape[2],\n",
        "                          1\n",
        "                          )\n",
        "X_val_2d = X_val.reshape(X_val.shape[0],\n",
        "                         1,\n",
        "                          X_val.shape[1], \n",
        "                          X_val.shape[2],\n",
        "                         1\n",
        "                          )\n",
        "X_test_2d = X_test.reshape(X_test.shape[0],\n",
        "                           1,\n",
        "                          X_test.shape[1], \n",
        "                          X_test.shape[2],\n",
        "                           1\n",
        "                          )\n",
        "\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "y_train_final = to_categorical(y_train, 3)\n",
        "y_val_final = to_categorical(y_val, 3)\n",
        "y_test_final = to_categorical(y_test, 3)\n",
        "\n",
        "print(f'X Train Length {X_train_2d.shape}, y Train Label Length {y_train_final.shape}')\n",
        "print(f'X Val Length {X_val_2d.shape}, y Val Label Length {y_val_final.shape}')\n",
        "print(f'X Test Length {X_test_2d.shape}, y Test Label Length {y_test_final.shape}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eKEjLzl2bCnX",
        "outputId": "5b70f924-22be-455c-b3b8-3888cad135f6"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X Train Length (3248, 1, 5, 24, 1), y Train Label Length (3248, 3)\n",
            "X Val Length (1148, 1, 5, 24, 1), y Val Label Length (1148, 3)\n",
            "X Test Length (884, 1, 5, 24, 1), y Test Label Length (884, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.hsplit(X_train_2d[1][0], 4)[0].shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pqmS6_JtUgPy",
        "outputId": "7fefe2be-4470-4445-fa3d-8619e5fb6b63"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5, 6, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(2):\n",
        "  print(X_train_2d[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2SjBwrpkT8Pr",
        "outputId": "efa46807-deb4-402e-e65f-565dbde91282"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[[0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]]\n",
            "\n",
            "  [[0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]]\n",
            "\n",
            "  [[0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]]\n",
            "\n",
            "  [[0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]]\n",
            "\n",
            "  [[0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]\n",
            "   [0.]]]]\n",
            "[[[[0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [9.36758105e-01]\n",
            "   [9.36626747e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.36721475e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.37157107e-01]\n",
            "   [9.36658354e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35724963e-01]\n",
            "   [9.35818218e-01]\n",
            "   [9.37188435e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.36242831e-01]\n",
            "   [9.35291190e-01]\n",
            "   [9.34825871e-01]\n",
            "   [9.35323383e-01]\n",
            "   [9.37179091e-01]]\n",
            "\n",
            "  [[0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [9.36758105e-01]\n",
            "   [9.36626747e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.36721475e-01]\n",
            "   [9.37188435e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.37157107e-01]\n",
            "   [9.36658354e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35659695e-01]\n",
            "   [9.35724963e-01]\n",
            "   [9.37188435e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.35306122e-01]\n",
            "   [9.35291190e-01]\n",
            "   [9.34825871e-01]\n",
            "   [9.35323383e-01]\n",
            "   [9.37179091e-01]]\n",
            "\n",
            "  [[0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [9.36626747e-01]\n",
            "   [9.36626747e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.36721475e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.37634731e-01]\n",
            "   [9.37157107e-01]\n",
            "   [9.36658354e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.36191426e-01]\n",
            "   [9.35818218e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.36227884e-01]\n",
            "   [9.35291190e-01]\n",
            "   [9.34825871e-01]\n",
            "   [9.35323383e-01]\n",
            "   [9.37655860e-01]]\n",
            "\n",
            "  [[0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [9.36626747e-01]\n",
            "   [9.36626747e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.36721475e-01]\n",
            "   [9.38123752e-01]\n",
            "   [9.37634731e-01]\n",
            "   [9.37157107e-01]\n",
            "   [9.36658354e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.35258964e-01]\n",
            "   [9.36191426e-01]\n",
            "   [9.35771588e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.37655860e-01]\n",
            "   [9.35291190e-01]\n",
            "   [9.35291190e-01]\n",
            "   [9.34825871e-01]\n",
            "   [9.35323383e-01]\n",
            "   [9.37655860e-01]]\n",
            "\n",
            "  [[0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [3.03441382e-02]\n",
            "   [0.00000000e+00]\n",
            "   [8.94942679e-04]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [9.11585338e-04]\n",
            "   [2.29922056e-03]\n",
            "   [8.98779457e-03]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [6.45161290e-04]\n",
            "   [0.00000000e+00]\n",
            "   [6.50575760e-03]\n",
            "   [0.00000000e+00]\n",
            "   [0.00000000e+00]\n",
            "   [2.41878915e-03]\n",
            "   [0.00000000e+00]]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "# Construct the input layer with no definite frame size.\n",
        "inp = layers.Input(shape=(X_train_2d.shape[1:]))\n",
        "\n",
        "# We will construct 3 `ConvLSTM2D` layers with batch normalization,\n",
        "# followed by a `Conv3D` layer for the spatiotemporal outputs.\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=32,\n",
        "    kernel_size=(1, 3),\n",
        "    strides=(1, 3),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(inp)\n",
        "x = layers.BatchNormalization()(x)\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=64,\n",
        "    kernel_size=(1, 3),\n",
        "    strides=(1, 3),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(x)\n",
        "x = layers.ConvLSTM2D(\n",
        "    filters=64,\n",
        "    kernel_size=(1, 2),\n",
        "    strides=(1, 2),\n",
        "    padding=\"same\",\n",
        "    return_sequences=True,\n",
        "    activation=\"relu\",\n",
        ")(x)\n",
        "x = layers.Conv2D(\n",
        "    filters=128, kernel_size=(1, 2), strides=(1, 1), activation=\"sigmoid\", padding=\"same\"\n",
        ")(x)\n",
        "x = layers.Flatten()(x)\n",
        "x = layers.Dense(1000,activation=\"relu\")(x)\n",
        "x = layers.Dense(500,activation=\"relu\")(x)\n",
        "x = layers.Dense(3,activation=\"softmax\")(x)\n",
        "\n",
        "# Next, we will build the complete model and compile it.\n",
        "model = keras.models.Model(inp, x)\n",
        "\n",
        "\n",
        "model.summary()\n",
        "\n",
        "model.compile(\n",
        "    loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),\n",
        "    metrics = [\"accuracy\"]\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QA368lhLa1Hz",
        "outputId": "4d8bec8c-dd23-46c1-c3ce-70a792296ad4"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_8\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_12 (InputLayer)       [(None, 1, 5, 24, 1)]     0         \n",
            "                                                                 \n",
            " conv_lstm2d_29 (ConvLSTM2D)  (None, 1, 5, 8, 32)      12800     \n",
            "                                                                 \n",
            " batch_normalization_7 (Batc  (None, 1, 5, 8, 32)      128       \n",
            " hNormalization)                                                 \n",
            "                                                                 \n",
            " conv_lstm2d_30 (ConvLSTM2D)  (None, 1, 5, 3, 64)      73984     \n",
            "                                                                 \n",
            " conv_lstm2d_31 (ConvLSTM2D)  (None, 1, 5, 2, 64)      65792     \n",
            "                                                                 \n",
            " conv2d_7 (Conv2D)           (None, 1, 5, 2, 128)      16512     \n",
            "                                                                 \n",
            " flatten_8 (Flatten)         (None, 1280)              0         \n",
            "                                                                 \n",
            " dense_23 (Dense)            (None, 1000)              1281000   \n",
            "                                                                 \n",
            " dense_24 (Dense)            (None, 500)               500500    \n",
            "                                                                 \n",
            " dense_25 (Dense)            (None, 3)                 1503      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,952,219\n",
            "Trainable params: 1,952,155\n",
            "Non-trainable params: 64\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "early_stopping = keras.callbacks.EarlyStopping(monitor=\"loss\", patience=10)\n",
        "reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\"loss\", patience=5)\n",
        "\n",
        "# Define modifiable training hyperparameters.\n",
        "epochs = 250\n",
        "batch_size = 12\n",
        "\n",
        "# Fit the model to the training data.\n",
        "hist = model.fit(\n",
        "    X_train_2d,\n",
        "    y_train_final,\n",
        "    batch_size=batch_size,\n",
        "    epochs=epochs,\n",
        "    validation_data=(X_val_2d, y_val_final),\n",
        "    # callbacks=[reduce_lr], #, early_stopping,],\n",
        "    # class_weight={0:1, 1:1.25, 2:1.25},\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "v31WV3A5a1Rb",
        "outputId": "e5f15c06-491c-4f2d-e786-728c975b6b2d"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/250\n",
            "270/270 [==============================] - 4s 15ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 2/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 3/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 4/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 5/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 6/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 7/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 8/250\n",
            "270/270 [==============================] - 4s 14ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 9/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 10/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 11/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 12/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 13/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 14/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 15/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 16/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 17/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 18/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 19/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 20/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 21/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 22/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 23/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 24/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 25/250\n",
            "270/270 [==============================] - 4s 14ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 26/250\n",
            "270/270 [==============================] - 4s 14ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 27/250\n",
            "270/270 [==============================] - 4s 14ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 28/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 29/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 30/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 31/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 32/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 33/250\n",
            "270/270 [==============================] - 4s 14ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 34/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 35/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 36/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 37/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 38/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 39/250\n",
            "270/270 [==============================] - 4s 15ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 40/250\n",
            "270/270 [==============================] - 4s 13ms/step - loss: 1.2260 - accuracy: 0.4719 - val_loss: 1.0908 - val_accuracy: 0.4030\n",
            "Epoch 41/250\n",
            "119/270 [============>.................] - ETA: 1s - loss: 1.2252 - accuracy: 0.4755"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-179-d4f4ad3da618>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val_2d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val_final\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;31m# callbacks=[reduce_lr], #, early_stopping,],\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1.25\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1.25\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m )\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(hist.history['loss'], label='train loss')\n",
        "plt.plot(hist.history['val_loss'], label='val loss')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "plt.savefig('LossVal_loss')"
      ],
      "metadata": {
        "id": "Z8oNnSOkWil-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(hist.history['accuracy'], label='train acc')\n",
        "plt.plot(hist.history['val_accuracy'], label='val acc')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "plt.savefig('AccVal_acc')"
      ],
      "metadata": {
        "id": "HFKPV65gW-z7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_val_pred = model.predict(X_test_2d)"
      ],
      "metadata": {
        "id": "YDZPZcyMXBNA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the accuracy\n",
        "test_preds = np.argmax(y_val_pred, axis=1)\n",
        "y_true = np.argmax(y_test_final, axis=1)\n",
        "test_acc = np.sum(test_preds == y_true)/y_true.shape[0]\n",
        "\n",
        "# Recall for each class\n",
        "recall_vals = []\n",
        "for i in range(3):\n",
        "    class_idx = np.argwhere(y_true==i)\n",
        "    total = len(class_idx)\n",
        "    correct = np.sum(test_preds[class_idx]==i)\n",
        "    recall = correct / total\n",
        "    recall_vals.append(recall)\n",
        "\n",
        "classes = [0, 1, 2]\n",
        "# Calculate the test set accuracy and recall for each class\n",
        "print('Test set accuracy is {:.3f}'.format(test_acc))\n",
        "for i in range(3):\n",
        "    print('For class {}, recall is {:.3f}'.format(classes[i],recall_vals[i]))\n",
        "\n",
        "print(\"Accuracy is {:.3f}\".format(test_acc))\n",
        "# print(\"Weighted F score is {:.3f}\".format(calculate_weighted_f_score(y_true, y_pred)))"
      ],
      "metadata": {
        "id": "EO2oGmbHXBKU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "def plot_confusion_matrix(cm,\n",
        "                          target_names,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=None,\n",
        "                          normalize=True):\n",
        "    \"\"\"\n",
        "    given a sklearn confusion matrix (cm), make a nice plot\n",
        "\n",
        "    Arguments\n",
        "    ---------\n",
        "    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n",
        "\n",
        "    target_names: given classification classes such as [0, 1, 2]\n",
        "                  the class names, for example: ['high', 'medium', 'low']\n",
        "\n",
        "    title:        the text to display at the top of the matrix\n",
        "\n",
        "    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n",
        "                  see http://matplotlib.org/examples/color/colormaps_reference.html\n",
        "                  plt.get_cmap('jet') or plt.cm.Blues\n",
        "\n",
        "    normalize:    If False, plot the raw numbers\n",
        "                  If True, plot the proportions\n",
        "\n",
        "    Usage\n",
        "    -----\n",
        "    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n",
        "                                                              # sklearn.metrics.confusion_matrix\n",
        "                          normalize    = True,                # show proportions\n",
        "                          target_names = y_labels_vals,       # list of names of the classes\n",
        "                          title        = best_estimator_name) # title of graph\n",
        "\n",
        "    Citiation\n",
        "    ---------\n",
        "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
        "\n",
        "    \"\"\"\n",
        "    import matplotlib.pyplot as plt\n",
        "    import numpy as np\n",
        "    import itertools\n",
        "\n",
        "    accuracy = np.trace(cm) / np.sum(cm).astype('float')\n",
        "    misclass = 1 - accuracy\n",
        "\n",
        "    if cmap is None:\n",
        "        cmap = plt.get_cmap('Blues')\n",
        "\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "\n",
        "    if target_names is not None:\n",
        "        tick_marks = np.arange(len(target_names))\n",
        "        plt.xticks(tick_marks, target_names, rotation=45)\n",
        "        plt.yticks(tick_marks, target_names)\n",
        "\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "\n",
        "    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        if normalize:\n",
        "            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n",
        "                     horizontalalignment=\"center\",\n",
        "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "        else:\n",
        "            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n",
        "                     horizontalalignment=\"center\",\n",
        "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n",
        "    plt.show()\n",
        "\n",
        "nb_classes = 3\n",
        "\n",
        "# Confusion matrix\n",
        "conf_mat=confusion_matrix(y_true, np.argmax(y_val_pred, axis=-1))\n",
        "plot_confusion_matrix(conf_mat, [0,1,2])\n",
        "\n",
        "from sklearn.metrics import precision_score\n",
        "\n",
        "precision_score(y_true, np.argmax(y_val_pred, axis=-1), average='weighted')\n",
        "\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "print(classification_report(y_true, np.argmax(y_val_pred, axis=-1), target_names=[\"flat\", \"down\", \"up\"], digits=4))"
      ],
      "metadata": {
        "id": "TYW7cFkTXBHL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_weighted_f_score(y_true, y_pred):\n",
        "  test_preds = np.argmax(y_pred, axis=-1)\n",
        "  Ntu = sum((test_preds == 2) & (y_true == 2))\n",
        "  Ntd = sum((test_preds == 1) & (y_true == 1))\n",
        "  Ntf = sum((test_preds == 0) & (y_true == 0))\n",
        "  Ewutd = sum((test_preds == 2) & (y_true == 1))\n",
        "  Ewdtu = sum((test_preds == 1) & (y_true == 2))\n",
        "  Ewutf = sum((test_preds == 2) & (y_true == 0))\n",
        "  Ewdtf = sum((test_preds == 1) & (y_true == 0))\n",
        "  Ewftu = sum((test_preds == 0) & (y_true == 2))\n",
        "  Ewftd = sum((test_preds == 0) & (y_true == 1))\n",
        "\n",
        "  beta_1 = 0.5\n",
        "  beta_2 = 0.125\n",
        "  beta_3 = 0.125\n",
        "\n",
        "  Ntp = Ntu + Ntd + beta_3**2 * Ntf\n",
        "  E1 = Ewutd + Ewdtu\n",
        "  E2 = Ewutf + Ewdtf\n",
        "  E3 = Ewftu + Ewftd\n",
        "\n",
        "  F = (1 + beta_1**2 + beta_2**2) * Ntp / ((1+beta_1**2+beta_2**2) * Ntp + E1 + beta_1**2 * E2 + beta_2**2 * E3)\n",
        "  return  F\n",
        "\n",
        "print(f'Weight CDT F Score: {calculate_weighted_f_score(y_true, y_val_pred)}')"
      ],
      "metadata": {
        "id": "mTflymqSXBEb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "mZshRU8SfT4Y"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}